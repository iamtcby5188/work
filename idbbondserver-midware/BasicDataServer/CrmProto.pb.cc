// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrmProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CrmProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Crm {

namespace {

const ::google::protobuf::Descriptor* CommonRequestFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonRequestFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonResponseFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonResponseFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCrmIdListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCrmIdListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrmIdItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrmIdItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCrmIdListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCrmIdListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstitutionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstitutionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCtctListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCtctListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountMappingItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountMappingItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCtctListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCtctListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoleListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoleListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoleListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoleListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTeamListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTeamListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTeamListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTeamListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountUpdateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountUpdateEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamUpdateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamUpdateEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstitutionUpdateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstitutionUpdateEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactUpdateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactUpdateEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManagerUpdateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManagerUpdateEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CrmProto_2eproto() {
  protobuf_AddDesc_CrmProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CrmProto.proto");
  GOOGLE_CHECK(file != NULL);
  CommonRequestFields_descriptor_ = file->message_type(0);
  static const int CommonRequestFields_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, currentaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, crm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, application_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, page_number_),
  };
  CommonRequestFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonRequestFields_descriptor_,
      CommonRequestFields::default_instance_,
      CommonRequestFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequestFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonRequestFields));
  CommonResponseFields_descriptor_ = file->message_type(1);
  static const int CommonResponseFields_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponseFields, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponseFields, return_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponseFields, return_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponseFields, return_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponseFields, page_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponseFields, message_id_),
  };
  CommonResponseFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonResponseFields_descriptor_,
      CommonResponseFields::default_instance_,
      CommonResponseFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponseFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponseFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonResponseFields));
  GetCrmIdListRequest_descriptor_ = file->message_type(2);
  static const int GetCrmIdListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCrmIdListRequest, common_fields_),
  };
  GetCrmIdListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCrmIdListRequest_descriptor_,
      GetCrmIdListRequest::default_instance_,
      GetCrmIdListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCrmIdListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCrmIdListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCrmIdListRequest));
  CrmIdItem_descriptor_ = file->message_type(3);
  static const int CrmIdItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrmIdItem, crm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrmIdItem, application_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrmIdItem, crm_name_),
  };
  CrmIdItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrmIdItem_descriptor_,
      CrmIdItem::default_instance_,
      CrmIdItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrmIdItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrmIdItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrmIdItem));
  GetCrmIdListResponse_descriptor_ = file->message_type(4);
  static const int GetCrmIdListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCrmIdListResponse, common_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCrmIdListResponse, result_),
  };
  GetCrmIdListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCrmIdListResponse_descriptor_,
      GetCrmIdListResponse::default_instance_,
      GetCrmIdListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCrmIdListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCrmIdListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCrmIdListResponse));
  GetInstListRequest_descriptor_ = file->message_type(5);
  static const int GetInstListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstListRequest, common_fields_),
  };
  GetInstListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstListRequest_descriptor_,
      GetInstListRequest::default_instance_,
      GetInstListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstListRequest));
  InstitutionItem_descriptor_ = file->message_type(6);
  static const int InstitutionItem_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, crm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, qb_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, idb_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, inst_short_name_cn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, pinyin_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, inst_short_name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, inst_full_name_cn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, inst_full_name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, inst_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, inst_city_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, inst_city_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, inst_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, is_internal_),
  };
  InstitutionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstitutionItem_descriptor_,
      InstitutionItem::default_instance_,
      InstitutionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstitutionItem));
  GetInstListResponse_descriptor_ = file->message_type(7);
  static const int GetInstListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstListResponse, common_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstListResponse, result_),
  };
  GetInstListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstListResponse_descriptor_,
      GetInstListResponse::default_instance_,
      GetInstListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstListResponse));
  GetCtctListRequest_descriptor_ = file->message_type(8);
  static const int GetCtctListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCtctListRequest, common_fields_),
  };
  GetCtctListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCtctListRequest_descriptor_,
      GetCtctListRequest::default_instance_,
      GetCtctListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCtctListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCtctListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCtctListRequest));
  AccountMappingItem_descriptor_ = file->message_type(9);
  static const int AccountMappingItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMappingItem, qb_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMappingItem, idb_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMappingItem, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMappingItem, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMappingItem, crm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMappingItem, ctct_id_),
  };
  AccountMappingItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountMappingItem_descriptor_,
      AccountMappingItem::default_instance_,
      AccountMappingItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMappingItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMappingItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountMappingItem));
  ContactItem_descriptor_ = file->message_type(10);
  static const int ContactItem_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, crm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, ctct_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, qb_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, idb_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, ctct_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, pinyin_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, inst_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, ctct_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, is_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, is_danger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, biz_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, account_mapping_),
  };
  ContactItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactItem_descriptor_,
      ContactItem::default_instance_,
      ContactItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactItem));
  GetCtctListResponse_descriptor_ = file->message_type(11);
  static const int GetCtctListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCtctListResponse, common_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCtctListResponse, result_),
  };
  GetCtctListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCtctListResponse_descriptor_,
      GetCtctListResponse::default_instance_,
      GetCtctListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCtctListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCtctListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCtctListResponse));
  GetAccountListRequest_descriptor_ = file->message_type(12);
  static const int GetAccountListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountListRequest, common_fields_),
  };
  GetAccountListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountListRequest_descriptor_,
      GetAccountListRequest::default_instance_,
      GetAccountListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountListRequest));
  AccountItem_descriptor_ = file->message_type(13);
  static const int AccountItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, crm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, idb_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, role_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, team_ids_),
  };
  AccountItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountItem_descriptor_,
      AccountItem::default_instance_,
      AccountItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountItem));
  GetAccountListResponse_descriptor_ = file->message_type(14);
  static const int GetAccountListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountListResponse, common_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountListResponse, result_),
  };
  GetAccountListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountListResponse_descriptor_,
      GetAccountListResponse::default_instance_,
      GetAccountListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountListResponse));
  GetRoleListRequest_descriptor_ = file->message_type(15);
  static const int GetRoleListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleListRequest, common_fields_),
  };
  GetRoleListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoleListRequest_descriptor_,
      GetRoleListRequest::default_instance_,
      GetRoleListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoleListRequest));
  RoleItem_descriptor_ = file->message_type(16);
  static const int RoleItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItem, crm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItem, role_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItem, role_name_),
  };
  RoleItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleItem_descriptor_,
      RoleItem::default_instance_,
      RoleItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleItem));
  GetRoleListResponse_descriptor_ = file->message_type(17);
  static const int GetRoleListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleListResponse, common_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleListResponse, result_),
  };
  GetRoleListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoleListResponse_descriptor_,
      GetRoleListResponse::default_instance_,
      GetRoleListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoleListResponse));
  GetTeamListRequest_descriptor_ = file->message_type(18);
  static const int GetTeamListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTeamListRequest, common_fields_),
  };
  GetTeamListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTeamListRequest_descriptor_,
      GetTeamListRequest::default_instance_,
      GetTeamListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTeamListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTeamListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTeamListRequest));
  TeamItem_descriptor_ = file->message_type(19);
  static const int TeamItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamItem, crm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamItem, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamItem, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamItem, team_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamItem, desc_),
  };
  TeamItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamItem_descriptor_,
      TeamItem::default_instance_,
      TeamItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamItem));
  GetTeamListResponse_descriptor_ = file->message_type(20);
  static const int GetTeamListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTeamListResponse, common_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTeamListResponse, result_),
  };
  GetTeamListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTeamListResponse_descriptor_,
      GetTeamListResponse::default_instance_,
      GetTeamListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTeamListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTeamListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTeamListResponse));
  AccountUpdateEvent_descriptor_ = file->message_type(21);
  static const int AccountUpdateEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountUpdateEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountUpdateEvent, account_),
  };
  AccountUpdateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountUpdateEvent_descriptor_,
      AccountUpdateEvent::default_instance_,
      AccountUpdateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountUpdateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountUpdateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountUpdateEvent));
  TeamUpdateEvent_descriptor_ = file->message_type(22);
  static const int TeamUpdateEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateEvent, team_),
  };
  TeamUpdateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamUpdateEvent_descriptor_,
      TeamUpdateEvent::default_instance_,
      TeamUpdateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamUpdateEvent));
  InstitutionUpdateEvent_descriptor_ = file->message_type(23);
  static const int InstitutionUpdateEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionUpdateEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionUpdateEvent, institution_),
  };
  InstitutionUpdateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstitutionUpdateEvent_descriptor_,
      InstitutionUpdateEvent::default_instance_,
      InstitutionUpdateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionUpdateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstitutionUpdateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstitutionUpdateEvent));
  ContactUpdateEvent_descriptor_ = file->message_type(24);
  static const int ContactUpdateEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactUpdateEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactUpdateEvent, contact_),
  };
  ContactUpdateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactUpdateEvent_descriptor_,
      ContactUpdateEvent::default_instance_,
      ContactUpdateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactUpdateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactUpdateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactUpdateEvent));
  ManagerUpdateEvent_descriptor_ = file->message_type(25);
  static const int ManagerUpdateEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerUpdateEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerUpdateEvent, mappings_),
  };
  ManagerUpdateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManagerUpdateEvent_descriptor_,
      ManagerUpdateEvent::default_instance_,
      ManagerUpdateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerUpdateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerUpdateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManagerUpdateEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CrmProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonRequestFields_descriptor_, &CommonRequestFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonResponseFields_descriptor_, &CommonResponseFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCrmIdListRequest_descriptor_, &GetCrmIdListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrmIdItem_descriptor_, &CrmIdItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCrmIdListResponse_descriptor_, &GetCrmIdListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstListRequest_descriptor_, &GetInstListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstitutionItem_descriptor_, &InstitutionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstListResponse_descriptor_, &GetInstListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCtctListRequest_descriptor_, &GetCtctListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountMappingItem_descriptor_, &AccountMappingItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactItem_descriptor_, &ContactItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCtctListResponse_descriptor_, &GetCtctListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountListRequest_descriptor_, &GetAccountListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountItem_descriptor_, &AccountItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountListResponse_descriptor_, &GetAccountListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoleListRequest_descriptor_, &GetRoleListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleItem_descriptor_, &RoleItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoleListResponse_descriptor_, &GetRoleListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTeamListRequest_descriptor_, &GetTeamListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamItem_descriptor_, &TeamItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTeamListResponse_descriptor_, &GetTeamListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountUpdateEvent_descriptor_, &AccountUpdateEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamUpdateEvent_descriptor_, &TeamUpdateEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstitutionUpdateEvent_descriptor_, &InstitutionUpdateEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactUpdateEvent_descriptor_, &ContactUpdateEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManagerUpdateEvent_descriptor_, &ManagerUpdateEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CrmProto_2eproto() {
  delete CommonRequestFields::default_instance_;
  delete CommonRequestFields_reflection_;
  delete CommonResponseFields::default_instance_;
  delete CommonResponseFields_reflection_;
  delete GetCrmIdListRequest::default_instance_;
  delete GetCrmIdListRequest_reflection_;
  delete CrmIdItem::default_instance_;
  delete CrmIdItem_reflection_;
  delete GetCrmIdListResponse::default_instance_;
  delete GetCrmIdListResponse_reflection_;
  delete GetInstListRequest::default_instance_;
  delete GetInstListRequest_reflection_;
  delete InstitutionItem::default_instance_;
  delete InstitutionItem_reflection_;
  delete GetInstListResponse::default_instance_;
  delete GetInstListResponse_reflection_;
  delete GetCtctListRequest::default_instance_;
  delete GetCtctListRequest_reflection_;
  delete AccountMappingItem::default_instance_;
  delete AccountMappingItem_reflection_;
  delete ContactItem::default_instance_;
  delete ContactItem_reflection_;
  delete GetCtctListResponse::default_instance_;
  delete GetCtctListResponse_reflection_;
  delete GetAccountListRequest::default_instance_;
  delete GetAccountListRequest_reflection_;
  delete AccountItem::default_instance_;
  delete AccountItem_reflection_;
  delete GetAccountListResponse::default_instance_;
  delete GetAccountListResponse_reflection_;
  delete GetRoleListRequest::default_instance_;
  delete GetRoleListRequest_reflection_;
  delete RoleItem::default_instance_;
  delete RoleItem_reflection_;
  delete GetRoleListResponse::default_instance_;
  delete GetRoleListResponse_reflection_;
  delete GetTeamListRequest::default_instance_;
  delete GetTeamListRequest_reflection_;
  delete TeamItem::default_instance_;
  delete TeamItem_reflection_;
  delete GetTeamListResponse::default_instance_;
  delete GetTeamListResponse_reflection_;
  delete AccountUpdateEvent::default_instance_;
  delete AccountUpdateEvent_reflection_;
  delete TeamUpdateEvent::default_instance_;
  delete TeamUpdateEvent_reflection_;
  delete InstitutionUpdateEvent::default_instance_;
  delete InstitutionUpdateEvent_reflection_;
  delete ContactUpdateEvent::default_instance_;
  delete ContactUpdateEvent_reflection_;
  delete ManagerUpdateEvent::default_instance_;
  delete ManagerUpdateEvent_reflection_;
}

void protobuf_AddDesc_CrmProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CrmProto.proto\022\003Crm\"\301\001\n\023CommonRequestF"
    "ields\022\022\n\nrequest_id\030\001 \001(\t\022\020\n\010username\030\002 "
    "\001(\014\022\020\n\010password\030\003 \001(\t\022\030\n\020currentAccountI"
    "d\030\004 \001(\t\022\016\n\006crm_id\030\005 \001(\003\022\030\n\020application_t"
    "ype\030\006 \001(\t\022\026\n\tpage_size\030\007 \001(\005:\003100\022\026\n\013pag"
    "e_number\030\010 \001(\005:\0010\"\224\001\n\024CommonResponseFiel"
    "ds\022\022\n\nrequest_id\030\001 \001(\t\022\023\n\013return_code\030\002 "
    "\001(\t\022\026\n\016return_message\030\003 \001(\t\022\024\n\014return_co"
    "unt\030\004 \001(\t\022\021\n\tpage_info\030\005 \001(\t\022\022\n\nmessage_"
    "id\030\006 \001(\t\"F\n\023GetCrmIdListRequest\022/\n\rcommo"
    "n_fields\030\001 \001(\0132\030.Crm.CommonRequestFields"
    "\"G\n\tCrmIdItem\022\016\n\006crm_id\030\001 \001(\t\022\030\n\020applica"
    "tion_type\030\002 \001(\t\022\020\n\010crm_name\030\003 \001(\014\"h\n\024Get"
    "CrmIdListResponse\0220\n\rcommon_fields\030\001 \001(\013"
    "2\031.Crm.CommonResponseFields\022\036\n\006result\030\002 "
    "\003(\0132\016.Crm.CrmIdItem\"E\n\022GetInstListReques"
    "t\022/\n\rcommon_fields\030\001 \001(\0132\030.Crm.CommonReq"
    "uestFields\"\210\003\n\017InstitutionItem\022\016\n\006crm_id"
    "\030\001 \001(\t\022\017\n\007inst_id\030\002 \001(\t\022\022\n\ncompany_id\030\003 "
    "\001(\t\022\r\n\005qb_id\030\004 \001(\t\022\017\n\007idb_key\030\005 \001(\t\022\032\n\022i"
    "nst_short_name_cn\030\006 \001(\014\022\016\n\006pinyin\030\007 \001(\t\022"
    "\023\n\013pinyin_full\030\010 \001(\t\022\032\n\022inst_short_name_"
    "en\030\t \001(\t\022\031\n\021inst_full_name_cn\030\n \001(\014\022\031\n\021i"
    "nst_full_name_en\030\013 \001(\t\022\021\n\tinst_code\030\014 \001("
    "\t\022\026\n\016inst_city_code\030\r \001(\t\022\027\n\017inst_city_v"
    "alue\030\016 \001(\014\022\014\n\004desc\030\017 \001(\014\022\023\n\013update_time\030"
    "\020 \001(\t\022\021\n\tinst_type\030\021 \001(\t\022\023\n\013is_internal\030"
    "\022 \001(\010\"m\n\023GetInstListResponse\0220\n\rcommon_f"
    "ields\030\001 \001(\0132\031.Crm.CommonResponseFields\022$"
    "\n\006result\030\002 \003(\0132\024.Crm.InstitutionItem\"E\n\022"
    "GetCtctListRequest\022/\n\rcommon_fields\030\001 \001("
    "\0132\030.Crm.CommonRequestFields\"z\n\022AccountMa"
    "ppingItem\022\r\n\005qb_id\030\001 \001(\t\022\017\n\007idb_key\030\002 \001("
    "\t\022\022\n\naccount_id\030\003 \001(\t\022\017\n\007team_id\030\004 \001(\t\022\016"
    "\n\006crm_id\030\005 \001(\t\022\017\n\007ctct_id\030\006 \001(\t\"\315\002\n\013Cont"
    "actItem\022\016\n\006crm_id\030\001 \001(\t\022\017\n\007ctct_id\030\002 \001(\t"
    "\022\022\n\ncompany_id\030\003 \001(\t\022\r\n\005qb_id\030\004 \001(\t\022\017\n\007i"
    "db_key\030\005 \001(\t\022\021\n\tctct_name\030\006 \001(\014\022\016\n\006pinyi"
    "n\030\007 \001(\t\022\023\n\013pinyin_full\030\010 \001(\t\022\017\n\007inst_id\030"
    "\t \001(\t\022\021\n\tinst_code\030\n \001(\t\022\021\n\tctct_code\030\013 "
    "\001(\t\022\016\n\006is_vip\030\014 \001(\010\022\021\n\tis_danger\030\r \001(\010\022\020"
    "\n\010biz_type\030\016 \001(\t\022\023\n\013update_time\030\017 \001(\t\0220\n"
    "\017account_mapping\030\020 \003(\0132\027.Crm.AccountMapp"
    "ingItem\"i\n\023GetCtctListResponse\0220\n\rcommon"
    "_fields\030\001 \001(\0132\031.Crm.CommonResponseFields"
    "\022 \n\006result\030\002 \003(\0132\020.Crm.ContactItem\"H\n\025Ge"
    "tAccountListRequest\022/\n\rcommon_fields\030\001 \001"
    "(\0132\030.Crm.CommonRequestFields\"\245\001\n\013Account"
    "Item\022\016\n\006crm_id\030\001 \001(\t\022\022\n\naccount_id\030\002 \001(\t"
    "\022\017\n\007idb_key\030\003 \001(\t\022\017\n\007account\030\004 \001(\t\022\024\n\014ac"
    "count_name\030\005 \001(\t\022\025\n\rserial_number\030\006 \001(\t\022"
    "\021\n\trole_code\030\007 \001(\t\022\020\n\010team_ids\030\010 \003(\t\"l\n\026"
    "GetAccountListResponse\0220\n\rcommon_fields\030"
    "\001 \001(\0132\031.Crm.CommonResponseFields\022 \n\006resu"
    "lt\030\002 \003(\0132\020.Crm.AccountItem\"E\n\022GetRoleLis"
    "tRequest\022/\n\rcommon_fields\030\001 \001(\0132\030.Crm.Co"
    "mmonRequestFields\"@\n\010RoleItem\022\016\n\006crm_id\030"
    "\001 \001(\t\022\021\n\trole_code\030\002 \001(\t\022\021\n\trole_name\030\003 "
    "\001(\t\"f\n\023GetRoleListResponse\0220\n\rcommon_fie"
    "lds\030\001 \001(\0132\031.Crm.CommonResponseFields\022\035\n\006"
    "result\030\002 \003(\0132\r.Crm.RoleItem\"E\n\022GetTeamLi"
    "stRequest\022/\n\rcommon_fields\030\001 \001(\0132\030.Crm.C"
    "ommonRequestFields\"_\n\010TeamItem\022\016\n\006crm_id"
    "\030\001 \001(\t\022\017\n\007team_id\030\002 \001(\t\022\021\n\tteam_name\030\003 \001"
    "(\014\022\021\n\tteam_code\030\004 \001(\014\022\014\n\004desc\030\005 \001(\014\"f\n\023G"
    "etTeamListResponse\0220\n\rcommon_fields\030\001 \001("
    "\0132\031.Crm.CommonResponseFields\022\035\n\006result\030\002"
    " \003(\0132\r.Crm.TeamItem\"J\n\022AccountUpdateEven"
    "t\022\021\n\teventType\030\001 \001(\t\022!\n\007account\030\002 \001(\0132\020."
    "Crm.AccountItem\"A\n\017TeamUpdateEvent\022\021\n\tev"
    "entType\030\001 \001(\t\022\033\n\004team\030\002 \001(\0132\r.Crm.TeamIt"
    "em\"V\n\026InstitutionUpdateEvent\022\021\n\teventTyp"
    "e\030\001 \001(\t\022)\n\013institution\030\002 \001(\0132\024.Crm.Insti"
    "tutionItem\"J\n\022ContactUpdateEvent\022\021\n\teven"
    "tType\030\001 \001(\t\022!\n\007contact\030\002 \001(\0132\020.Crm.Conta"
    "ctItem\"R\n\022ManagerUpdateEvent\022\021\n\teventTyp"
    "e\030\001 \001(\t\022)\n\010mappings\030\002 \003(\0132\027.Crm.AccountM"
    "appingItemB.\n,com.sumscope.crm.crm_serve"
    "r.entity.protobuff", 3138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CrmProto.proto", &protobuf_RegisterTypes);
  CommonRequestFields::default_instance_ = new CommonRequestFields();
  CommonResponseFields::default_instance_ = new CommonResponseFields();
  GetCrmIdListRequest::default_instance_ = new GetCrmIdListRequest();
  CrmIdItem::default_instance_ = new CrmIdItem();
  GetCrmIdListResponse::default_instance_ = new GetCrmIdListResponse();
  GetInstListRequest::default_instance_ = new GetInstListRequest();
  InstitutionItem::default_instance_ = new InstitutionItem();
  GetInstListResponse::default_instance_ = new GetInstListResponse();
  GetCtctListRequest::default_instance_ = new GetCtctListRequest();
  AccountMappingItem::default_instance_ = new AccountMappingItem();
  ContactItem::default_instance_ = new ContactItem();
  GetCtctListResponse::default_instance_ = new GetCtctListResponse();
  GetAccountListRequest::default_instance_ = new GetAccountListRequest();
  AccountItem::default_instance_ = new AccountItem();
  GetAccountListResponse::default_instance_ = new GetAccountListResponse();
  GetRoleListRequest::default_instance_ = new GetRoleListRequest();
  RoleItem::default_instance_ = new RoleItem();
  GetRoleListResponse::default_instance_ = new GetRoleListResponse();
  GetTeamListRequest::default_instance_ = new GetTeamListRequest();
  TeamItem::default_instance_ = new TeamItem();
  GetTeamListResponse::default_instance_ = new GetTeamListResponse();
  AccountUpdateEvent::default_instance_ = new AccountUpdateEvent();
  TeamUpdateEvent::default_instance_ = new TeamUpdateEvent();
  InstitutionUpdateEvent::default_instance_ = new InstitutionUpdateEvent();
  ContactUpdateEvent::default_instance_ = new ContactUpdateEvent();
  ManagerUpdateEvent::default_instance_ = new ManagerUpdateEvent();
  CommonRequestFields::default_instance_->InitAsDefaultInstance();
  CommonResponseFields::default_instance_->InitAsDefaultInstance();
  GetCrmIdListRequest::default_instance_->InitAsDefaultInstance();
  CrmIdItem::default_instance_->InitAsDefaultInstance();
  GetCrmIdListResponse::default_instance_->InitAsDefaultInstance();
  GetInstListRequest::default_instance_->InitAsDefaultInstance();
  InstitutionItem::default_instance_->InitAsDefaultInstance();
  GetInstListResponse::default_instance_->InitAsDefaultInstance();
  GetCtctListRequest::default_instance_->InitAsDefaultInstance();
  AccountMappingItem::default_instance_->InitAsDefaultInstance();
  ContactItem::default_instance_->InitAsDefaultInstance();
  GetCtctListResponse::default_instance_->InitAsDefaultInstance();
  GetAccountListRequest::default_instance_->InitAsDefaultInstance();
  AccountItem::default_instance_->InitAsDefaultInstance();
  GetAccountListResponse::default_instance_->InitAsDefaultInstance();
  GetRoleListRequest::default_instance_->InitAsDefaultInstance();
  RoleItem::default_instance_->InitAsDefaultInstance();
  GetRoleListResponse::default_instance_->InitAsDefaultInstance();
  GetTeamListRequest::default_instance_->InitAsDefaultInstance();
  TeamItem::default_instance_->InitAsDefaultInstance();
  GetTeamListResponse::default_instance_->InitAsDefaultInstance();
  AccountUpdateEvent::default_instance_->InitAsDefaultInstance();
  TeamUpdateEvent::default_instance_->InitAsDefaultInstance();
  InstitutionUpdateEvent::default_instance_->InitAsDefaultInstance();
  ContactUpdateEvent::default_instance_->InitAsDefaultInstance();
  ManagerUpdateEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CrmProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CrmProto_2eproto {
  StaticDescriptorInitializer_CrmProto_2eproto() {
    protobuf_AddDesc_CrmProto_2eproto();
  }
} static_descriptor_initializer_CrmProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CommonRequestFields::kRequestIdFieldNumber;
const int CommonRequestFields::kUsernameFieldNumber;
const int CommonRequestFields::kPasswordFieldNumber;
const int CommonRequestFields::kCurrentAccountIdFieldNumber;
const int CommonRequestFields::kCrmIdFieldNumber;
const int CommonRequestFields::kApplicationTypeFieldNumber;
const int CommonRequestFields::kPageSizeFieldNumber;
const int CommonRequestFields::kPageNumberFieldNumber;
#endif  // !_MSC_VER

CommonRequestFields::CommonRequestFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonRequestFields::InitAsDefaultInstance() {
}

CommonRequestFields::CommonRequestFields(const CommonRequestFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonRequestFields::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentaccountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crm_id_ = GOOGLE_LONGLONG(0);
  application_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_size_ = 100;
  page_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonRequestFields::~CommonRequestFields() {
  SharedDtor();
}

void CommonRequestFields::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (currentaccountid_ != &::google::protobuf::internal::kEmptyString) {
    delete currentaccountid_;
  }
  if (application_type_ != &::google::protobuf::internal::kEmptyString) {
    delete application_type_;
  }
  if (this != default_instance_) {
  }
}

void CommonRequestFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonRequestFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonRequestFields_descriptor_;
}

const CommonRequestFields& CommonRequestFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

CommonRequestFields* CommonRequestFields::default_instance_ = NULL;

CommonRequestFields* CommonRequestFields::New() const {
  return new CommonRequestFields;
}

void CommonRequestFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_currentaccountid()) {
      if (currentaccountid_ != &::google::protobuf::internal::kEmptyString) {
        currentaccountid_->clear();
      }
    }
    crm_id_ = GOOGLE_LONGLONG(0);
    if (has_application_type()) {
      if (application_type_ != &::google::protobuf::internal::kEmptyString) {
        application_type_->clear();
      }
    }
    page_size_ = 100;
    page_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonRequestFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currentAccountId;
        break;
      }

      // optional string currentAccountId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentAccountId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentaccountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentaccountid().data(), this->currentaccountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crm_id;
        break;
      }

      // optional int64 crm_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crm_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crm_id_)));
          set_has_crm_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_application_type;
        break;
      }

      // optional string application_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->application_type().data(), this->application_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 7 [default = 100];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
          set_has_page_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_page_number;
        break;
      }

      // optional int32 page_number = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_number_)));
          set_has_page_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonRequestFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }

  // optional bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string currentAccountId = 4;
  if (has_currentaccountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentaccountid().data(), this->currentaccountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currentaccountid(), output);
  }

  // optional int64 crm_id = 5;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->crm_id(), output);
  }

  // optional string application_type = 6;
  if (has_application_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_type().data(), this->application_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->application_type(), output);
  }

  // optional int32 page_size = 7 [default = 100];
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->page_size(), output);
  }

  // optional int32 page_number = 8 [default = 0];
  if (has_page_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->page_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonRequestFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string currentAccountId = 4;
  if (has_currentaccountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentaccountid().data(), this->currentaccountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currentaccountid(), target);
  }

  // optional int64 crm_id = 5;
  if (has_crm_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->crm_id(), target);
  }

  // optional string application_type = 6;
  if (has_application_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_type().data(), this->application_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->application_type(), target);
  }

  // optional int32 page_size = 7 [default = 100];
  if (has_page_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->page_size(), target);
  }

  // optional int32 page_number = 8 [default = 0];
  if (has_page_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->page_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonRequestFields::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string currentAccountId = 4;
    if (has_currentaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentaccountid());
    }

    // optional int64 crm_id = 5;
    if (has_crm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crm_id());
    }

    // optional string application_type = 6;
    if (has_application_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_type());
    }

    // optional int32 page_size = 7 [default = 100];
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_size());
    }

    // optional int32 page_number = 8 [default = 0];
    if (has_page_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonRequestFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonRequestFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonRequestFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonRequestFields::MergeFrom(const CommonRequestFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_currentaccountid()) {
      set_currentaccountid(from.currentaccountid());
    }
    if (from.has_crm_id()) {
      set_crm_id(from.crm_id());
    }
    if (from.has_application_type()) {
      set_application_type(from.application_type());
    }
    if (from.has_page_size()) {
      set_page_size(from.page_size());
    }
    if (from.has_page_number()) {
      set_page_number(from.page_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonRequestFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRequestFields::CopyFrom(const CommonRequestFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRequestFields::IsInitialized() const {

  return true;
}

void CommonRequestFields::Swap(CommonRequestFields* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(currentaccountid_, other->currentaccountid_);
    std::swap(crm_id_, other->crm_id_);
    std::swap(application_type_, other->application_type_);
    std::swap(page_size_, other->page_size_);
    std::swap(page_number_, other->page_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonRequestFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonRequestFields_descriptor_;
  metadata.reflection = CommonRequestFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonResponseFields::kRequestIdFieldNumber;
const int CommonResponseFields::kReturnCodeFieldNumber;
const int CommonResponseFields::kReturnMessageFieldNumber;
const int CommonResponseFields::kReturnCountFieldNumber;
const int CommonResponseFields::kPageInfoFieldNumber;
const int CommonResponseFields::kMessageIdFieldNumber;
#endif  // !_MSC_VER

CommonResponseFields::CommonResponseFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonResponseFields::InitAsDefaultInstance() {
}

CommonResponseFields::CommonResponseFields(const CommonResponseFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonResponseFields::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  return_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  return_count_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonResponseFields::~CommonResponseFields() {
  SharedDtor();
}

void CommonResponseFields::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (return_code_ != &::google::protobuf::internal::kEmptyString) {
    delete return_code_;
  }
  if (return_message_ != &::google::protobuf::internal::kEmptyString) {
    delete return_message_;
  }
  if (return_count_ != &::google::protobuf::internal::kEmptyString) {
    delete return_count_;
  }
  if (page_info_ != &::google::protobuf::internal::kEmptyString) {
    delete page_info_;
  }
  if (message_id_ != &::google::protobuf::internal::kEmptyString) {
    delete message_id_;
  }
  if (this != default_instance_) {
  }
}

void CommonResponseFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonResponseFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonResponseFields_descriptor_;
}

const CommonResponseFields& CommonResponseFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

CommonResponseFields* CommonResponseFields::default_instance_ = NULL;

CommonResponseFields* CommonResponseFields::New() const {
  return new CommonResponseFields;
}

void CommonResponseFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_return_code()) {
      if (return_code_ != &::google::protobuf::internal::kEmptyString) {
        return_code_->clear();
      }
    }
    if (has_return_message()) {
      if (return_message_ != &::google::protobuf::internal::kEmptyString) {
        return_message_->clear();
      }
    }
    if (has_return_count()) {
      if (return_count_ != &::google::protobuf::internal::kEmptyString) {
        return_count_->clear();
      }
    }
    if (has_page_info()) {
      if (page_info_ != &::google::protobuf::internal::kEmptyString) {
        page_info_->clear();
      }
    }
    if (has_message_id()) {
      if (message_id_ != &::google::protobuf::internal::kEmptyString) {
        message_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonResponseFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_return_code;
        break;
      }

      // optional string return_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_return_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->return_code().data(), this->return_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_return_message;
        break;
      }

      // optional string return_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_return_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->return_message().data(), this->return_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_return_count;
        break;
      }

      // optional string return_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_return_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_count()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->return_count().data(), this->return_count().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_page_info;
        break;
      }

      // optional string page_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_info().data(), this->page_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_message_id;
        break;
      }

      // optional string message_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_id().data(), this->message_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonResponseFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }

  // optional string return_code = 2;
  if (has_return_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_code().data(), this->return_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->return_code(), output);
  }

  // optional string return_message = 3;
  if (has_return_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_message().data(), this->return_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->return_message(), output);
  }

  // optional string return_count = 4;
  if (has_return_count()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_count().data(), this->return_count().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->return_count(), output);
  }

  // optional string page_info = 5;
  if (has_page_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_info().data(), this->page_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->page_info(), output);
  }

  // optional string message_id = 6;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonResponseFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string return_code = 2;
  if (has_return_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_code().data(), this->return_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->return_code(), target);
  }

  // optional string return_message = 3;
  if (has_return_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_message().data(), this->return_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->return_message(), target);
  }

  // optional string return_count = 4;
  if (has_return_count()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_count().data(), this->return_count().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->return_count(), target);
  }

  // optional string page_info = 5;
  if (has_page_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_info().data(), this->page_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->page_info(), target);
  }

  // optional string message_id = 6;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonResponseFields::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string return_code = 2;
    if (has_return_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->return_code());
    }

    // optional string return_message = 3;
    if (has_return_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->return_message());
    }

    // optional string return_count = 4;
    if (has_return_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->return_count());
    }

    // optional string page_info = 5;
    if (has_page_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_info());
    }

    // optional string message_id = 6;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonResponseFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonResponseFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonResponseFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonResponseFields::MergeFrom(const CommonResponseFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_return_code()) {
      set_return_code(from.return_code());
    }
    if (from.has_return_message()) {
      set_return_message(from.return_message());
    }
    if (from.has_return_count()) {
      set_return_count(from.return_count());
    }
    if (from.has_page_info()) {
      set_page_info(from.page_info());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonResponseFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResponseFields::CopyFrom(const CommonResponseFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResponseFields::IsInitialized() const {

  return true;
}

void CommonResponseFields::Swap(CommonResponseFields* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(return_code_, other->return_code_);
    std::swap(return_message_, other->return_message_);
    std::swap(return_count_, other->return_count_);
    std::swap(page_info_, other->page_info_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonResponseFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonResponseFields_descriptor_;
  metadata.reflection = CommonResponseFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCrmIdListRequest::kCommonFieldsFieldNumber;
#endif  // !_MSC_VER

GetCrmIdListRequest::GetCrmIdListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCrmIdListRequest::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonRequestFields*>(&::Crm::CommonRequestFields::default_instance());
}

GetCrmIdListRequest::GetCrmIdListRequest(const GetCrmIdListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCrmIdListRequest::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCrmIdListRequest::~GetCrmIdListRequest() {
  SharedDtor();
}

void GetCrmIdListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetCrmIdListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCrmIdListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCrmIdListRequest_descriptor_;
}

const GetCrmIdListRequest& GetCrmIdListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetCrmIdListRequest* GetCrmIdListRequest::default_instance_ = NULL;

GetCrmIdListRequest* GetCrmIdListRequest::New() const {
  return new GetCrmIdListRequest;
}

void GetCrmIdListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonRequestFields::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCrmIdListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonRequestFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCrmIdListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCrmIdListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCrmIdListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonRequestFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCrmIdListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCrmIdListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCrmIdListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCrmIdListRequest::MergeFrom(const GetCrmIdListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonRequestFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCrmIdListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCrmIdListRequest::CopyFrom(const GetCrmIdListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCrmIdListRequest::IsInitialized() const {

  return true;
}

void GetCrmIdListRequest::Swap(GetCrmIdListRequest* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCrmIdListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCrmIdListRequest_descriptor_;
  metadata.reflection = GetCrmIdListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrmIdItem::kCrmIdFieldNumber;
const int CrmIdItem::kApplicationTypeFieldNumber;
const int CrmIdItem::kCrmNameFieldNumber;
#endif  // !_MSC_VER

CrmIdItem::CrmIdItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrmIdItem::InitAsDefaultInstance() {
}

CrmIdItem::CrmIdItem(const CrmIdItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrmIdItem::SharedCtor() {
  _cached_size_ = 0;
  crm_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  application_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crm_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrmIdItem::~CrmIdItem() {
  SharedDtor();
}

void CrmIdItem::SharedDtor() {
  if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
    delete crm_id_;
  }
  if (application_type_ != &::google::protobuf::internal::kEmptyString) {
    delete application_type_;
  }
  if (crm_name_ != &::google::protobuf::internal::kEmptyString) {
    delete crm_name_;
  }
  if (this != default_instance_) {
  }
}

void CrmIdItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrmIdItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrmIdItem_descriptor_;
}

const CrmIdItem& CrmIdItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

CrmIdItem* CrmIdItem::default_instance_ = NULL;

CrmIdItem* CrmIdItem::New() const {
  return new CrmIdItem;
}

void CrmIdItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crm_id()) {
      if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
        crm_id_->clear();
      }
    }
    if (has_application_type()) {
      if (application_type_ != &::google::protobuf::internal::kEmptyString) {
        application_type_->clear();
      }
    }
    if (has_crm_name()) {
      if (crm_name_ != &::google::protobuf::internal::kEmptyString) {
        crm_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrmIdItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crm_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crm_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crm_id().data(), this->crm_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_application_type;
        break;
      }

      // optional string application_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->application_type().data(), this->application_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_crm_name;
        break;
      }

      // optional bytes crm_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crm_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crm_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrmIdItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->crm_id(), output);
  }

  // optional string application_type = 2;
  if (has_application_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_type().data(), this->application_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->application_type(), output);
  }

  // optional bytes crm_name = 3;
  if (has_crm_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->crm_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrmIdItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crm_id(), target);
  }

  // optional string application_type = 2;
  if (has_application_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_type().data(), this->application_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->application_type(), target);
  }

  // optional bytes crm_name = 3;
  if (has_crm_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->crm_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrmIdItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string crm_id = 1;
    if (has_crm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crm_id());
    }

    // optional string application_type = 2;
    if (has_application_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_type());
    }

    // optional bytes crm_name = 3;
    if (has_crm_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crm_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrmIdItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrmIdItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrmIdItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrmIdItem::MergeFrom(const CrmIdItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crm_id()) {
      set_crm_id(from.crm_id());
    }
    if (from.has_application_type()) {
      set_application_type(from.application_type());
    }
    if (from.has_crm_name()) {
      set_crm_name(from.crm_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrmIdItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrmIdItem::CopyFrom(const CrmIdItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrmIdItem::IsInitialized() const {

  return true;
}

void CrmIdItem::Swap(CrmIdItem* other) {
  if (other != this) {
    std::swap(crm_id_, other->crm_id_);
    std::swap(application_type_, other->application_type_);
    std::swap(crm_name_, other->crm_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrmIdItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrmIdItem_descriptor_;
  metadata.reflection = CrmIdItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCrmIdListResponse::kCommonFieldsFieldNumber;
const int GetCrmIdListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetCrmIdListResponse::GetCrmIdListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCrmIdListResponse::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonResponseFields*>(&::Crm::CommonResponseFields::default_instance());
}

GetCrmIdListResponse::GetCrmIdListResponse(const GetCrmIdListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCrmIdListResponse::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCrmIdListResponse::~GetCrmIdListResponse() {
  SharedDtor();
}

void GetCrmIdListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetCrmIdListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCrmIdListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCrmIdListResponse_descriptor_;
}

const GetCrmIdListResponse& GetCrmIdListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetCrmIdListResponse* GetCrmIdListResponse::default_instance_ = NULL;

GetCrmIdListResponse* GetCrmIdListResponse::New() const {
  return new GetCrmIdListResponse;
}

void GetCrmIdListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonResponseFields::Clear();
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCrmIdListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonResponseFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .Crm.CrmIdItem result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCrmIdListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  // repeated .Crm.CrmIdItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCrmIdListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  // repeated .Crm.CrmIdItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCrmIdListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonResponseFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  // repeated .Crm.CrmIdItem result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCrmIdListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCrmIdListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCrmIdListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCrmIdListResponse::MergeFrom(const GetCrmIdListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonResponseFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCrmIdListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCrmIdListResponse::CopyFrom(const GetCrmIdListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCrmIdListResponse::IsInitialized() const {

  return true;
}

void GetCrmIdListResponse::Swap(GetCrmIdListResponse* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCrmIdListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCrmIdListResponse_descriptor_;
  metadata.reflection = GetCrmIdListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInstListRequest::kCommonFieldsFieldNumber;
#endif  // !_MSC_VER

GetInstListRequest::GetInstListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstListRequest::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonRequestFields*>(&::Crm::CommonRequestFields::default_instance());
}

GetInstListRequest::GetInstListRequest(const GetInstListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstListRequest::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstListRequest::~GetInstListRequest() {
  SharedDtor();
}

void GetInstListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetInstListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstListRequest_descriptor_;
}

const GetInstListRequest& GetInstListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetInstListRequest* GetInstListRequest::default_instance_ = NULL;

GetInstListRequest* GetInstListRequest::New() const {
  return new GetInstListRequest;
}

void GetInstListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonRequestFields::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonRequestFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInstListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonRequestFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstListRequest::MergeFrom(const GetInstListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonRequestFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstListRequest::CopyFrom(const GetInstListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstListRequest::IsInitialized() const {

  return true;
}

void GetInstListRequest::Swap(GetInstListRequest* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstListRequest_descriptor_;
  metadata.reflection = GetInstListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstitutionItem::kCrmIdFieldNumber;
const int InstitutionItem::kInstIdFieldNumber;
const int InstitutionItem::kCompanyIdFieldNumber;
const int InstitutionItem::kQbIdFieldNumber;
const int InstitutionItem::kIdbKeyFieldNumber;
const int InstitutionItem::kInstShortNameCnFieldNumber;
const int InstitutionItem::kPinyinFieldNumber;
const int InstitutionItem::kPinyinFullFieldNumber;
const int InstitutionItem::kInstShortNameEnFieldNumber;
const int InstitutionItem::kInstFullNameCnFieldNumber;
const int InstitutionItem::kInstFullNameEnFieldNumber;
const int InstitutionItem::kInstCodeFieldNumber;
const int InstitutionItem::kInstCityCodeFieldNumber;
const int InstitutionItem::kInstCityValueFieldNumber;
const int InstitutionItem::kDescFieldNumber;
const int InstitutionItem::kUpdateTimeFieldNumber;
const int InstitutionItem::kInstTypeFieldNumber;
const int InstitutionItem::kIsInternalFieldNumber;
#endif  // !_MSC_VER

InstitutionItem::InstitutionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstitutionItem::InitAsDefaultInstance() {
}

InstitutionItem::InstitutionItem(const InstitutionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstitutionItem::SharedCtor() {
  _cached_size_ = 0;
  crm_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  company_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qb_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idb_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_short_name_cn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pinyin_full_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_short_name_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_full_name_cn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_full_name_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_city_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_city_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_internal_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstitutionItem::~InstitutionItem() {
  SharedDtor();
}

void InstitutionItem::SharedDtor() {
  if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
    delete crm_id_;
  }
  if (inst_id_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_id_;
  }
  if (company_id_ != &::google::protobuf::internal::kEmptyString) {
    delete company_id_;
  }
  if (qb_id_ != &::google::protobuf::internal::kEmptyString) {
    delete qb_id_;
  }
  if (idb_key_ != &::google::protobuf::internal::kEmptyString) {
    delete idb_key_;
  }
  if (inst_short_name_cn_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_short_name_cn_;
  }
  if (pinyin_ != &::google::protobuf::internal::kEmptyString) {
    delete pinyin_;
  }
  if (pinyin_full_ != &::google::protobuf::internal::kEmptyString) {
    delete pinyin_full_;
  }
  if (inst_short_name_en_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_short_name_en_;
  }
  if (inst_full_name_cn_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_full_name_cn_;
  }
  if (inst_full_name_en_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_full_name_en_;
  }
  if (inst_code_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_code_;
  }
  if (inst_city_code_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_city_code_;
  }
  if (inst_city_value_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_city_value_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (update_time_ != &::google::protobuf::internal::kEmptyString) {
    delete update_time_;
  }
  if (inst_type_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_type_;
  }
  if (this != default_instance_) {
  }
}

void InstitutionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstitutionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstitutionItem_descriptor_;
}

const InstitutionItem& InstitutionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

InstitutionItem* InstitutionItem::default_instance_ = NULL;

InstitutionItem* InstitutionItem::New() const {
  return new InstitutionItem;
}

void InstitutionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crm_id()) {
      if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
        crm_id_->clear();
      }
    }
    if (has_inst_id()) {
      if (inst_id_ != &::google::protobuf::internal::kEmptyString) {
        inst_id_->clear();
      }
    }
    if (has_company_id()) {
      if (company_id_ != &::google::protobuf::internal::kEmptyString) {
        company_id_->clear();
      }
    }
    if (has_qb_id()) {
      if (qb_id_ != &::google::protobuf::internal::kEmptyString) {
        qb_id_->clear();
      }
    }
    if (has_idb_key()) {
      if (idb_key_ != &::google::protobuf::internal::kEmptyString) {
        idb_key_->clear();
      }
    }
    if (has_inst_short_name_cn()) {
      if (inst_short_name_cn_ != &::google::protobuf::internal::kEmptyString) {
        inst_short_name_cn_->clear();
      }
    }
    if (has_pinyin()) {
      if (pinyin_ != &::google::protobuf::internal::kEmptyString) {
        pinyin_->clear();
      }
    }
    if (has_pinyin_full()) {
      if (pinyin_full_ != &::google::protobuf::internal::kEmptyString) {
        pinyin_full_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_inst_short_name_en()) {
      if (inst_short_name_en_ != &::google::protobuf::internal::kEmptyString) {
        inst_short_name_en_->clear();
      }
    }
    if (has_inst_full_name_cn()) {
      if (inst_full_name_cn_ != &::google::protobuf::internal::kEmptyString) {
        inst_full_name_cn_->clear();
      }
    }
    if (has_inst_full_name_en()) {
      if (inst_full_name_en_ != &::google::protobuf::internal::kEmptyString) {
        inst_full_name_en_->clear();
      }
    }
    if (has_inst_code()) {
      if (inst_code_ != &::google::protobuf::internal::kEmptyString) {
        inst_code_->clear();
      }
    }
    if (has_inst_city_code()) {
      if (inst_city_code_ != &::google::protobuf::internal::kEmptyString) {
        inst_city_code_->clear();
      }
    }
    if (has_inst_city_value()) {
      if (inst_city_value_ != &::google::protobuf::internal::kEmptyString) {
        inst_city_value_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::kEmptyString) {
        update_time_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_inst_type()) {
      if (inst_type_ != &::google::protobuf::internal::kEmptyString) {
        inst_type_->clear();
      }
    }
    is_internal_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstitutionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crm_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crm_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crm_id().data(), this->crm_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inst_id;
        break;
      }

      // optional string inst_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inst_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inst_id().data(), this->inst_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_company_id;
        break;
      }

      // optional string company_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_company_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_qb_id;
        break;
      }

      // optional string qb_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qb_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qb_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qb_id().data(), this->qb_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_idb_key;
        break;
      }

      // optional string idb_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idb_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idb_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idb_key().data(), this->idb_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_inst_short_name_cn;
        break;
      }

      // optional bytes inst_short_name_cn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_short_name_cn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inst_short_name_cn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pinyin;
        break;
      }

      // optional string pinyin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pinyin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pinyin().data(), this->pinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pinyin_full;
        break;
      }

      // optional string pinyin_full = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pinyin_full:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pinyin_full()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pinyin_full().data(), this->pinyin_full().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_inst_short_name_en;
        break;
      }

      // optional string inst_short_name_en = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_short_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inst_short_name_en()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inst_short_name_en().data(), this->inst_short_name_en().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_inst_full_name_cn;
        break;
      }

      // optional bytes inst_full_name_cn = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_full_name_cn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inst_full_name_cn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_inst_full_name_en;
        break;
      }

      // optional string inst_full_name_en = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_full_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inst_full_name_en()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inst_full_name_en().data(), this->inst_full_name_en().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_inst_code;
        break;
      }

      // optional string inst_code = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inst_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inst_code().data(), this->inst_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_inst_city_code;
        break;
      }

      // optional string inst_city_code = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_city_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inst_city_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inst_city_code().data(), this->inst_city_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_inst_city_value;
        break;
      }

      // optional bytes inst_city_value = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_city_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inst_city_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_desc;
        break;
      }

      // optional bytes desc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_update_time;
        break;
      }

      // optional string update_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_time().data(), this->update_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_inst_type;
        break;
      }

      // optional string inst_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inst_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inst_type().data(), this->inst_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_internal;
        break;
      }

      // optional bool is_internal = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_internal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_internal_)));
          set_has_is_internal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstitutionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->crm_id(), output);
  }

  // optional string inst_id = 2;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_id().data(), this->inst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inst_id(), output);
  }

  // optional string company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->company_id(), output);
  }

  // optional string qb_id = 4;
  if (has_qb_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qb_id().data(), this->qb_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->qb_id(), output);
  }

  // optional string idb_key = 5;
  if (has_idb_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idb_key().data(), this->idb_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->idb_key(), output);
  }

  // optional bytes inst_short_name_cn = 6;
  if (has_inst_short_name_cn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->inst_short_name_cn(), output);
  }

  // optional string pinyin = 7;
  if (has_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pinyin().data(), this->pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->pinyin(), output);
  }

  // optional string pinyin_full = 8;
  if (has_pinyin_full()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pinyin_full().data(), this->pinyin_full().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pinyin_full(), output);
  }

  // optional string inst_short_name_en = 9;
  if (has_inst_short_name_en()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_short_name_en().data(), this->inst_short_name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->inst_short_name_en(), output);
  }

  // optional bytes inst_full_name_cn = 10;
  if (has_inst_full_name_cn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->inst_full_name_cn(), output);
  }

  // optional string inst_full_name_en = 11;
  if (has_inst_full_name_en()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_full_name_en().data(), this->inst_full_name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->inst_full_name_en(), output);
  }

  // optional string inst_code = 12;
  if (has_inst_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_code().data(), this->inst_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->inst_code(), output);
  }

  // optional string inst_city_code = 13;
  if (has_inst_city_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_city_code().data(), this->inst_city_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->inst_city_code(), output);
  }

  // optional bytes inst_city_value = 14;
  if (has_inst_city_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->inst_city_value(), output);
  }

  // optional bytes desc = 15;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->desc(), output);
  }

  // optional string update_time = 16;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_time().data(), this->update_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->update_time(), output);
  }

  // optional string inst_type = 17;
  if (has_inst_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_type().data(), this->inst_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->inst_type(), output);
  }

  // optional bool is_internal = 18;
  if (has_is_internal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_internal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstitutionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crm_id(), target);
  }

  // optional string inst_id = 2;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_id().data(), this->inst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inst_id(), target);
  }

  // optional string company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->company_id(), target);
  }

  // optional string qb_id = 4;
  if (has_qb_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qb_id().data(), this->qb_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->qb_id(), target);
  }

  // optional string idb_key = 5;
  if (has_idb_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idb_key().data(), this->idb_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->idb_key(), target);
  }

  // optional bytes inst_short_name_cn = 6;
  if (has_inst_short_name_cn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->inst_short_name_cn(), target);
  }

  // optional string pinyin = 7;
  if (has_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pinyin().data(), this->pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pinyin(), target);
  }

  // optional string pinyin_full = 8;
  if (has_pinyin_full()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pinyin_full().data(), this->pinyin_full().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pinyin_full(), target);
  }

  // optional string inst_short_name_en = 9;
  if (has_inst_short_name_en()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_short_name_en().data(), this->inst_short_name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->inst_short_name_en(), target);
  }

  // optional bytes inst_full_name_cn = 10;
  if (has_inst_full_name_cn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->inst_full_name_cn(), target);
  }

  // optional string inst_full_name_en = 11;
  if (has_inst_full_name_en()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_full_name_en().data(), this->inst_full_name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->inst_full_name_en(), target);
  }

  // optional string inst_code = 12;
  if (has_inst_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_code().data(), this->inst_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->inst_code(), target);
  }

  // optional string inst_city_code = 13;
  if (has_inst_city_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_city_code().data(), this->inst_city_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->inst_city_code(), target);
  }

  // optional bytes inst_city_value = 14;
  if (has_inst_city_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->inst_city_value(), target);
  }

  // optional bytes desc = 15;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->desc(), target);
  }

  // optional string update_time = 16;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_time().data(), this->update_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->update_time(), target);
  }

  // optional string inst_type = 17;
  if (has_inst_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_type().data(), this->inst_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->inst_type(), target);
  }

  // optional bool is_internal = 18;
  if (has_is_internal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_internal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstitutionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string crm_id = 1;
    if (has_crm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crm_id());
    }

    // optional string inst_id = 2;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inst_id());
    }

    // optional string company_id = 3;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_id());
    }

    // optional string qb_id = 4;
    if (has_qb_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qb_id());
    }

    // optional string idb_key = 5;
    if (has_idb_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idb_key());
    }

    // optional bytes inst_short_name_cn = 6;
    if (has_inst_short_name_cn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inst_short_name_cn());
    }

    // optional string pinyin = 7;
    if (has_pinyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pinyin());
    }

    // optional string pinyin_full = 8;
    if (has_pinyin_full()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pinyin_full());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string inst_short_name_en = 9;
    if (has_inst_short_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inst_short_name_en());
    }

    // optional bytes inst_full_name_cn = 10;
    if (has_inst_full_name_cn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inst_full_name_cn());
    }

    // optional string inst_full_name_en = 11;
    if (has_inst_full_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inst_full_name_en());
    }

    // optional string inst_code = 12;
    if (has_inst_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inst_code());
    }

    // optional string inst_city_code = 13;
    if (has_inst_city_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inst_city_code());
    }

    // optional bytes inst_city_value = 14;
    if (has_inst_city_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inst_city_value());
    }

    // optional bytes desc = 15;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional string update_time = 16;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string inst_type = 17;
    if (has_inst_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inst_type());
    }

    // optional bool is_internal = 18;
    if (has_is_internal()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstitutionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstitutionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstitutionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstitutionItem::MergeFrom(const InstitutionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crm_id()) {
      set_crm_id(from.crm_id());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_qb_id()) {
      set_qb_id(from.qb_id());
    }
    if (from.has_idb_key()) {
      set_idb_key(from.idb_key());
    }
    if (from.has_inst_short_name_cn()) {
      set_inst_short_name_cn(from.inst_short_name_cn());
    }
    if (from.has_pinyin()) {
      set_pinyin(from.pinyin());
    }
    if (from.has_pinyin_full()) {
      set_pinyin_full(from.pinyin_full());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inst_short_name_en()) {
      set_inst_short_name_en(from.inst_short_name_en());
    }
    if (from.has_inst_full_name_cn()) {
      set_inst_full_name_cn(from.inst_full_name_cn());
    }
    if (from.has_inst_full_name_en()) {
      set_inst_full_name_en(from.inst_full_name_en());
    }
    if (from.has_inst_code()) {
      set_inst_code(from.inst_code());
    }
    if (from.has_inst_city_code()) {
      set_inst_city_code(from.inst_city_code());
    }
    if (from.has_inst_city_value()) {
      set_inst_city_value(from.inst_city_value());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_inst_type()) {
      set_inst_type(from.inst_type());
    }
    if (from.has_is_internal()) {
      set_is_internal(from.is_internal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstitutionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstitutionItem::CopyFrom(const InstitutionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstitutionItem::IsInitialized() const {

  return true;
}

void InstitutionItem::Swap(InstitutionItem* other) {
  if (other != this) {
    std::swap(crm_id_, other->crm_id_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(company_id_, other->company_id_);
    std::swap(qb_id_, other->qb_id_);
    std::swap(idb_key_, other->idb_key_);
    std::swap(inst_short_name_cn_, other->inst_short_name_cn_);
    std::swap(pinyin_, other->pinyin_);
    std::swap(pinyin_full_, other->pinyin_full_);
    std::swap(inst_short_name_en_, other->inst_short_name_en_);
    std::swap(inst_full_name_cn_, other->inst_full_name_cn_);
    std::swap(inst_full_name_en_, other->inst_full_name_en_);
    std::swap(inst_code_, other->inst_code_);
    std::swap(inst_city_code_, other->inst_city_code_);
    std::swap(inst_city_value_, other->inst_city_value_);
    std::swap(desc_, other->desc_);
    std::swap(update_time_, other->update_time_);
    std::swap(inst_type_, other->inst_type_);
    std::swap(is_internal_, other->is_internal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstitutionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstitutionItem_descriptor_;
  metadata.reflection = InstitutionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInstListResponse::kCommonFieldsFieldNumber;
const int GetInstListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetInstListResponse::GetInstListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstListResponse::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonResponseFields*>(&::Crm::CommonResponseFields::default_instance());
}

GetInstListResponse::GetInstListResponse(const GetInstListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstListResponse::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstListResponse::~GetInstListResponse() {
  SharedDtor();
}

void GetInstListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetInstListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstListResponse_descriptor_;
}

const GetInstListResponse& GetInstListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetInstListResponse* GetInstListResponse::default_instance_ = NULL;

GetInstListResponse* GetInstListResponse::New() const {
  return new GetInstListResponse;
}

void GetInstListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonResponseFields::Clear();
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonResponseFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .Crm.InstitutionItem result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInstListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  // repeated .Crm.InstitutionItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  // repeated .Crm.InstitutionItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonResponseFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  // repeated .Crm.InstitutionItem result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstListResponse::MergeFrom(const GetInstListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonResponseFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstListResponse::CopyFrom(const GetInstListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstListResponse::IsInitialized() const {

  return true;
}

void GetInstListResponse::Swap(GetInstListResponse* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstListResponse_descriptor_;
  metadata.reflection = GetInstListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCtctListRequest::kCommonFieldsFieldNumber;
#endif  // !_MSC_VER

GetCtctListRequest::GetCtctListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCtctListRequest::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonRequestFields*>(&::Crm::CommonRequestFields::default_instance());
}

GetCtctListRequest::GetCtctListRequest(const GetCtctListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCtctListRequest::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCtctListRequest::~GetCtctListRequest() {
  SharedDtor();
}

void GetCtctListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetCtctListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCtctListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCtctListRequest_descriptor_;
}

const GetCtctListRequest& GetCtctListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetCtctListRequest* GetCtctListRequest::default_instance_ = NULL;

GetCtctListRequest* GetCtctListRequest::New() const {
  return new GetCtctListRequest;
}

void GetCtctListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonRequestFields::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCtctListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonRequestFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCtctListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCtctListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCtctListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonRequestFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCtctListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCtctListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCtctListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCtctListRequest::MergeFrom(const GetCtctListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonRequestFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCtctListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCtctListRequest::CopyFrom(const GetCtctListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCtctListRequest::IsInitialized() const {

  return true;
}

void GetCtctListRequest::Swap(GetCtctListRequest* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCtctListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCtctListRequest_descriptor_;
  metadata.reflection = GetCtctListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountMappingItem::kQbIdFieldNumber;
const int AccountMappingItem::kIdbKeyFieldNumber;
const int AccountMappingItem::kAccountIdFieldNumber;
const int AccountMappingItem::kTeamIdFieldNumber;
const int AccountMappingItem::kCrmIdFieldNumber;
const int AccountMappingItem::kCtctIdFieldNumber;
#endif  // !_MSC_VER

AccountMappingItem::AccountMappingItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountMappingItem::InitAsDefaultInstance() {
}

AccountMappingItem::AccountMappingItem(const AccountMappingItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountMappingItem::SharedCtor() {
  _cached_size_ = 0;
  qb_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idb_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crm_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ctct_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountMappingItem::~AccountMappingItem() {
  SharedDtor();
}

void AccountMappingItem::SharedDtor() {
  if (qb_id_ != &::google::protobuf::internal::kEmptyString) {
    delete qb_id_;
  }
  if (idb_key_ != &::google::protobuf::internal::kEmptyString) {
    delete idb_key_;
  }
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (team_id_ != &::google::protobuf::internal::kEmptyString) {
    delete team_id_;
  }
  if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
    delete crm_id_;
  }
  if (ctct_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ctct_id_;
  }
  if (this != default_instance_) {
  }
}

void AccountMappingItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountMappingItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountMappingItem_descriptor_;
}

const AccountMappingItem& AccountMappingItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

AccountMappingItem* AccountMappingItem::default_instance_ = NULL;

AccountMappingItem* AccountMappingItem::New() const {
  return new AccountMappingItem;
}

void AccountMappingItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_qb_id()) {
      if (qb_id_ != &::google::protobuf::internal::kEmptyString) {
        qb_id_->clear();
      }
    }
    if (has_idb_key()) {
      if (idb_key_ != &::google::protobuf::internal::kEmptyString) {
        idb_key_->clear();
      }
    }
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_team_id()) {
      if (team_id_ != &::google::protobuf::internal::kEmptyString) {
        team_id_->clear();
      }
    }
    if (has_crm_id()) {
      if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
        crm_id_->clear();
      }
    }
    if (has_ctct_id()) {
      if (ctct_id_ != &::google::protobuf::internal::kEmptyString) {
        ctct_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountMappingItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string qb_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qb_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qb_id().data(), this->qb_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_idb_key;
        break;
      }

      // optional string idb_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idb_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idb_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idb_key().data(), this->idb_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account_id;
        break;
      }

      // optional string account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_team_id;
        break;
      }

      // optional string team_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_id().data(), this->team_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_crm_id;
        break;
      }

      // optional string crm_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crm_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crm_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crm_id().data(), this->crm_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ctct_id;
        break;
      }

      // optional string ctct_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ctct_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ctct_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ctct_id().data(), this->ctct_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountMappingItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string qb_id = 1;
  if (has_qb_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qb_id().data(), this->qb_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->qb_id(), output);
  }

  // optional string idb_key = 2;
  if (has_idb_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idb_key().data(), this->idb_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->idb_key(), output);
  }

  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account_id(), output);
  }

  // optional string team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_id().data(), this->team_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->team_id(), output);
  }

  // optional string crm_id = 5;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->crm_id(), output);
  }

  // optional string ctct_id = 6;
  if (has_ctct_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ctct_id().data(), this->ctct_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ctct_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountMappingItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string qb_id = 1;
  if (has_qb_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qb_id().data(), this->qb_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qb_id(), target);
  }

  // optional string idb_key = 2;
  if (has_idb_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idb_key().data(), this->idb_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->idb_key(), target);
  }

  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account_id(), target);
  }

  // optional string team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_id().data(), this->team_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_id(), target);
  }

  // optional string crm_id = 5;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->crm_id(), target);
  }

  // optional string ctct_id = 6;
  if (has_ctct_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ctct_id().data(), this->ctct_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ctct_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountMappingItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string qb_id = 1;
    if (has_qb_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qb_id());
    }

    // optional string idb_key = 2;
    if (has_idb_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idb_key());
    }

    // optional string account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }

    // optional string team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_id());
    }

    // optional string crm_id = 5;
    if (has_crm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crm_id());
    }

    // optional string ctct_id = 6;
    if (has_ctct_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ctct_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountMappingItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountMappingItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountMappingItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountMappingItem::MergeFrom(const AccountMappingItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qb_id()) {
      set_qb_id(from.qb_id());
    }
    if (from.has_idb_key()) {
      set_idb_key(from.idb_key());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_crm_id()) {
      set_crm_id(from.crm_id());
    }
    if (from.has_ctct_id()) {
      set_ctct_id(from.ctct_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountMappingItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountMappingItem::CopyFrom(const AccountMappingItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountMappingItem::IsInitialized() const {

  return true;
}

void AccountMappingItem::Swap(AccountMappingItem* other) {
  if (other != this) {
    std::swap(qb_id_, other->qb_id_);
    std::swap(idb_key_, other->idb_key_);
    std::swap(account_id_, other->account_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(crm_id_, other->crm_id_);
    std::swap(ctct_id_, other->ctct_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountMappingItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountMappingItem_descriptor_;
  metadata.reflection = AccountMappingItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactItem::kCrmIdFieldNumber;
const int ContactItem::kCtctIdFieldNumber;
const int ContactItem::kCompanyIdFieldNumber;
const int ContactItem::kQbIdFieldNumber;
const int ContactItem::kIdbKeyFieldNumber;
const int ContactItem::kCtctNameFieldNumber;
const int ContactItem::kPinyinFieldNumber;
const int ContactItem::kPinyinFullFieldNumber;
const int ContactItem::kInstIdFieldNumber;
const int ContactItem::kInstCodeFieldNumber;
const int ContactItem::kCtctCodeFieldNumber;
const int ContactItem::kIsVipFieldNumber;
const int ContactItem::kIsDangerFieldNumber;
const int ContactItem::kBizTypeFieldNumber;
const int ContactItem::kUpdateTimeFieldNumber;
const int ContactItem::kAccountMappingFieldNumber;
#endif  // !_MSC_VER

ContactItem::ContactItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactItem::InitAsDefaultInstance() {
}

ContactItem::ContactItem(const ContactItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactItem::SharedCtor() {
  _cached_size_ = 0;
  crm_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ctct_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  company_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qb_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idb_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ctct_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pinyin_full_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ctct_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_vip_ = false;
  is_danger_ = false;
  biz_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactItem::~ContactItem() {
  SharedDtor();
}

void ContactItem::SharedDtor() {
  if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
    delete crm_id_;
  }
  if (ctct_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ctct_id_;
  }
  if (company_id_ != &::google::protobuf::internal::kEmptyString) {
    delete company_id_;
  }
  if (qb_id_ != &::google::protobuf::internal::kEmptyString) {
    delete qb_id_;
  }
  if (idb_key_ != &::google::protobuf::internal::kEmptyString) {
    delete idb_key_;
  }
  if (ctct_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ctct_name_;
  }
  if (pinyin_ != &::google::protobuf::internal::kEmptyString) {
    delete pinyin_;
  }
  if (pinyin_full_ != &::google::protobuf::internal::kEmptyString) {
    delete pinyin_full_;
  }
  if (inst_id_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_id_;
  }
  if (inst_code_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_code_;
  }
  if (ctct_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ctct_code_;
  }
  if (biz_type_ != &::google::protobuf::internal::kEmptyString) {
    delete biz_type_;
  }
  if (update_time_ != &::google::protobuf::internal::kEmptyString) {
    delete update_time_;
  }
  if (this != default_instance_) {
  }
}

void ContactItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactItem_descriptor_;
}

const ContactItem& ContactItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

ContactItem* ContactItem::default_instance_ = NULL;

ContactItem* ContactItem::New() const {
  return new ContactItem;
}

void ContactItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crm_id()) {
      if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
        crm_id_->clear();
      }
    }
    if (has_ctct_id()) {
      if (ctct_id_ != &::google::protobuf::internal::kEmptyString) {
        ctct_id_->clear();
      }
    }
    if (has_company_id()) {
      if (company_id_ != &::google::protobuf::internal::kEmptyString) {
        company_id_->clear();
      }
    }
    if (has_qb_id()) {
      if (qb_id_ != &::google::protobuf::internal::kEmptyString) {
        qb_id_->clear();
      }
    }
    if (has_idb_key()) {
      if (idb_key_ != &::google::protobuf::internal::kEmptyString) {
        idb_key_->clear();
      }
    }
    if (has_ctct_name()) {
      if (ctct_name_ != &::google::protobuf::internal::kEmptyString) {
        ctct_name_->clear();
      }
    }
    if (has_pinyin()) {
      if (pinyin_ != &::google::protobuf::internal::kEmptyString) {
        pinyin_->clear();
      }
    }
    if (has_pinyin_full()) {
      if (pinyin_full_ != &::google::protobuf::internal::kEmptyString) {
        pinyin_full_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_inst_id()) {
      if (inst_id_ != &::google::protobuf::internal::kEmptyString) {
        inst_id_->clear();
      }
    }
    if (has_inst_code()) {
      if (inst_code_ != &::google::protobuf::internal::kEmptyString) {
        inst_code_->clear();
      }
    }
    if (has_ctct_code()) {
      if (ctct_code_ != &::google::protobuf::internal::kEmptyString) {
        ctct_code_->clear();
      }
    }
    is_vip_ = false;
    is_danger_ = false;
    if (has_biz_type()) {
      if (biz_type_ != &::google::protobuf::internal::kEmptyString) {
        biz_type_->clear();
      }
    }
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::kEmptyString) {
        update_time_->clear();
      }
    }
  }
  account_mapping_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crm_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crm_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crm_id().data(), this->crm_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ctct_id;
        break;
      }

      // optional string ctct_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ctct_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ctct_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ctct_id().data(), this->ctct_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_company_id;
        break;
      }

      // optional string company_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_company_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_qb_id;
        break;
      }

      // optional string qb_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qb_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qb_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qb_id().data(), this->qb_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_idb_key;
        break;
      }

      // optional string idb_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idb_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idb_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idb_key().data(), this->idb_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ctct_name;
        break;
      }

      // optional bytes ctct_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ctct_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ctct_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pinyin;
        break;
      }

      // optional string pinyin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pinyin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pinyin().data(), this->pinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pinyin_full;
        break;
      }

      // optional string pinyin_full = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pinyin_full:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pinyin_full()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pinyin_full().data(), this->pinyin_full().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_inst_id;
        break;
      }

      // optional string inst_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inst_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inst_id().data(), this->inst_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_inst_code;
        break;
      }

      // optional string inst_code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inst_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inst_code().data(), this->inst_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ctct_code;
        break;
      }

      // optional string ctct_code = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ctct_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ctct_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ctct_code().data(), this->ctct_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_vip;
        break;
      }

      // optional bool is_vip = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vip_)));
          set_has_is_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_danger;
        break;
      }

      // optional bool is_danger = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_danger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_danger_)));
          set_has_is_danger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_biz_type;
        break;
      }

      // optional string biz_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_biz_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_biz_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->biz_type().data(), this->biz_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_update_time;
        break;
      }

      // optional string update_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_time().data(), this->update_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_account_mapping;
        break;
      }

      // repeated .Crm.AccountMappingItem account_mapping = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account_mapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_account_mapping;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->crm_id(), output);
  }

  // optional string ctct_id = 2;
  if (has_ctct_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ctct_id().data(), this->ctct_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ctct_id(), output);
  }

  // optional string company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->company_id(), output);
  }

  // optional string qb_id = 4;
  if (has_qb_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qb_id().data(), this->qb_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->qb_id(), output);
  }

  // optional string idb_key = 5;
  if (has_idb_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idb_key().data(), this->idb_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->idb_key(), output);
  }

  // optional bytes ctct_name = 6;
  if (has_ctct_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->ctct_name(), output);
  }

  // optional string pinyin = 7;
  if (has_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pinyin().data(), this->pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->pinyin(), output);
  }

  // optional string pinyin_full = 8;
  if (has_pinyin_full()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pinyin_full().data(), this->pinyin_full().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pinyin_full(), output);
  }

  // optional string inst_id = 9;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_id().data(), this->inst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->inst_id(), output);
  }

  // optional string inst_code = 10;
  if (has_inst_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_code().data(), this->inst_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->inst_code(), output);
  }

  // optional string ctct_code = 11;
  if (has_ctct_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ctct_code().data(), this->ctct_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ctct_code(), output);
  }

  // optional bool is_vip = 12;
  if (has_is_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_vip(), output);
  }

  // optional bool is_danger = 13;
  if (has_is_danger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_danger(), output);
  }

  // optional string biz_type = 14;
  if (has_biz_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->biz_type().data(), this->biz_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->biz_type(), output);
  }

  // optional string update_time = 15;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_time().data(), this->update_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->update_time(), output);
  }

  // repeated .Crm.AccountMappingItem account_mapping = 16;
  for (int i = 0; i < this->account_mapping_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->account_mapping(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crm_id(), target);
  }

  // optional string ctct_id = 2;
  if (has_ctct_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ctct_id().data(), this->ctct_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ctct_id(), target);
  }

  // optional string company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->company_id(), target);
  }

  // optional string qb_id = 4;
  if (has_qb_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qb_id().data(), this->qb_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->qb_id(), target);
  }

  // optional string idb_key = 5;
  if (has_idb_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idb_key().data(), this->idb_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->idb_key(), target);
  }

  // optional bytes ctct_name = 6;
  if (has_ctct_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ctct_name(), target);
  }

  // optional string pinyin = 7;
  if (has_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pinyin().data(), this->pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pinyin(), target);
  }

  // optional string pinyin_full = 8;
  if (has_pinyin_full()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pinyin_full().data(), this->pinyin_full().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pinyin_full(), target);
  }

  // optional string inst_id = 9;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_id().data(), this->inst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->inst_id(), target);
  }

  // optional string inst_code = 10;
  if (has_inst_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_code().data(), this->inst_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->inst_code(), target);
  }

  // optional string ctct_code = 11;
  if (has_ctct_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ctct_code().data(), this->ctct_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ctct_code(), target);
  }

  // optional bool is_vip = 12;
  if (has_is_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_vip(), target);
  }

  // optional bool is_danger = 13;
  if (has_is_danger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_danger(), target);
  }

  // optional string biz_type = 14;
  if (has_biz_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->biz_type().data(), this->biz_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->biz_type(), target);
  }

  // optional string update_time = 15;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_time().data(), this->update_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->update_time(), target);
  }

  // repeated .Crm.AccountMappingItem account_mapping = 16;
  for (int i = 0; i < this->account_mapping_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->account_mapping(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string crm_id = 1;
    if (has_crm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crm_id());
    }

    // optional string ctct_id = 2;
    if (has_ctct_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ctct_id());
    }

    // optional string company_id = 3;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_id());
    }

    // optional string qb_id = 4;
    if (has_qb_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qb_id());
    }

    // optional string idb_key = 5;
    if (has_idb_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idb_key());
    }

    // optional bytes ctct_name = 6;
    if (has_ctct_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ctct_name());
    }

    // optional string pinyin = 7;
    if (has_pinyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pinyin());
    }

    // optional string pinyin_full = 8;
    if (has_pinyin_full()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pinyin_full());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string inst_id = 9;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inst_id());
    }

    // optional string inst_code = 10;
    if (has_inst_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inst_code());
    }

    // optional string ctct_code = 11;
    if (has_ctct_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ctct_code());
    }

    // optional bool is_vip = 12;
    if (has_is_vip()) {
      total_size += 1 + 1;
    }

    // optional bool is_danger = 13;
    if (has_is_danger()) {
      total_size += 1 + 1;
    }

    // optional string biz_type = 14;
    if (has_biz_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->biz_type());
    }

    // optional string update_time = 15;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_time());
    }

  }
  // repeated .Crm.AccountMappingItem account_mapping = 16;
  total_size += 2 * this->account_mapping_size();
  for (int i = 0; i < this->account_mapping_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account_mapping(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactItem::MergeFrom(const ContactItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_mapping_.MergeFrom(from.account_mapping_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crm_id()) {
      set_crm_id(from.crm_id());
    }
    if (from.has_ctct_id()) {
      set_ctct_id(from.ctct_id());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_qb_id()) {
      set_qb_id(from.qb_id());
    }
    if (from.has_idb_key()) {
      set_idb_key(from.idb_key());
    }
    if (from.has_ctct_name()) {
      set_ctct_name(from.ctct_name());
    }
    if (from.has_pinyin()) {
      set_pinyin(from.pinyin());
    }
    if (from.has_pinyin_full()) {
      set_pinyin_full(from.pinyin_full());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
    if (from.has_inst_code()) {
      set_inst_code(from.inst_code());
    }
    if (from.has_ctct_code()) {
      set_ctct_code(from.ctct_code());
    }
    if (from.has_is_vip()) {
      set_is_vip(from.is_vip());
    }
    if (from.has_is_danger()) {
      set_is_danger(from.is_danger());
    }
    if (from.has_biz_type()) {
      set_biz_type(from.biz_type());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactItem::CopyFrom(const ContactItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactItem::IsInitialized() const {

  return true;
}

void ContactItem::Swap(ContactItem* other) {
  if (other != this) {
    std::swap(crm_id_, other->crm_id_);
    std::swap(ctct_id_, other->ctct_id_);
    std::swap(company_id_, other->company_id_);
    std::swap(qb_id_, other->qb_id_);
    std::swap(idb_key_, other->idb_key_);
    std::swap(ctct_name_, other->ctct_name_);
    std::swap(pinyin_, other->pinyin_);
    std::swap(pinyin_full_, other->pinyin_full_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(inst_code_, other->inst_code_);
    std::swap(ctct_code_, other->ctct_code_);
    std::swap(is_vip_, other->is_vip_);
    std::swap(is_danger_, other->is_danger_);
    std::swap(biz_type_, other->biz_type_);
    std::swap(update_time_, other->update_time_);
    account_mapping_.Swap(&other->account_mapping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactItem_descriptor_;
  metadata.reflection = ContactItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCtctListResponse::kCommonFieldsFieldNumber;
const int GetCtctListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetCtctListResponse::GetCtctListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCtctListResponse::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonResponseFields*>(&::Crm::CommonResponseFields::default_instance());
}

GetCtctListResponse::GetCtctListResponse(const GetCtctListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCtctListResponse::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCtctListResponse::~GetCtctListResponse() {
  SharedDtor();
}

void GetCtctListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetCtctListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCtctListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCtctListResponse_descriptor_;
}

const GetCtctListResponse& GetCtctListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetCtctListResponse* GetCtctListResponse::default_instance_ = NULL;

GetCtctListResponse* GetCtctListResponse::New() const {
  return new GetCtctListResponse;
}

void GetCtctListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonResponseFields::Clear();
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCtctListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonResponseFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .Crm.ContactItem result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCtctListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  // repeated .Crm.ContactItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCtctListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  // repeated .Crm.ContactItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCtctListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonResponseFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  // repeated .Crm.ContactItem result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCtctListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCtctListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCtctListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCtctListResponse::MergeFrom(const GetCtctListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonResponseFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCtctListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCtctListResponse::CopyFrom(const GetCtctListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCtctListResponse::IsInitialized() const {

  return true;
}

void GetCtctListResponse::Swap(GetCtctListResponse* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCtctListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCtctListResponse_descriptor_;
  metadata.reflection = GetCtctListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountListRequest::kCommonFieldsFieldNumber;
#endif  // !_MSC_VER

GetAccountListRequest::GetAccountListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountListRequest::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonRequestFields*>(&::Crm::CommonRequestFields::default_instance());
}

GetAccountListRequest::GetAccountListRequest(const GetAccountListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountListRequest::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountListRequest::~GetAccountListRequest() {
  SharedDtor();
}

void GetAccountListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetAccountListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountListRequest_descriptor_;
}

const GetAccountListRequest& GetAccountListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetAccountListRequest* GetAccountListRequest::default_instance_ = NULL;

GetAccountListRequest* GetAccountListRequest::New() const {
  return new GetAccountListRequest;
}

void GetAccountListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonRequestFields::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonRequestFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonRequestFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountListRequest::MergeFrom(const GetAccountListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonRequestFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountListRequest::CopyFrom(const GetAccountListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountListRequest::IsInitialized() const {

  return true;
}

void GetAccountListRequest::Swap(GetAccountListRequest* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountListRequest_descriptor_;
  metadata.reflection = GetAccountListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountItem::kCrmIdFieldNumber;
const int AccountItem::kAccountIdFieldNumber;
const int AccountItem::kIdbKeyFieldNumber;
const int AccountItem::kAccountFieldNumber;
const int AccountItem::kAccountNameFieldNumber;
const int AccountItem::kSerialNumberFieldNumber;
const int AccountItem::kRoleCodeFieldNumber;
const int AccountItem::kTeamIdsFieldNumber;
#endif  // !_MSC_VER

AccountItem::AccountItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountItem::InitAsDefaultInstance() {
}

AccountItem::AccountItem(const AccountItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountItem::SharedCtor() {
  _cached_size_ = 0;
  crm_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idb_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serial_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountItem::~AccountItem() {
  SharedDtor();
}

void AccountItem::SharedDtor() {
  if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
    delete crm_id_;
  }
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (idb_key_ != &::google::protobuf::internal::kEmptyString) {
    delete idb_key_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (serial_number_ != &::google::protobuf::internal::kEmptyString) {
    delete serial_number_;
  }
  if (role_code_ != &::google::protobuf::internal::kEmptyString) {
    delete role_code_;
  }
  if (this != default_instance_) {
  }
}

void AccountItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountItem_descriptor_;
}

const AccountItem& AccountItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

AccountItem* AccountItem::default_instance_ = NULL;

AccountItem* AccountItem::New() const {
  return new AccountItem;
}

void AccountItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crm_id()) {
      if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
        crm_id_->clear();
      }
    }
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_idb_key()) {
      if (idb_key_ != &::google::protobuf::internal::kEmptyString) {
        idb_key_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_serial_number()) {
      if (serial_number_ != &::google::protobuf::internal::kEmptyString) {
        serial_number_->clear();
      }
    }
    if (has_role_code()) {
      if (role_code_ != &::google::protobuf::internal::kEmptyString) {
        role_code_->clear();
      }
    }
  }
  team_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crm_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crm_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crm_id().data(), this->crm_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // optional string account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_idb_key;
        break;
      }

      // optional string idb_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idb_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idb_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idb_key().data(), this->idb_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account_name;
        break;
      }

      // optional string account_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_serial_number;
        break;
      }

      // optional string serial_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_role_code;
        break;
      }

      // optional string role_code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_code().data(), this->role_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_team_ids;
        break;
      }

      // repeated string team_ids = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_team_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_ids(this->team_ids_size() - 1).data(),
            this->team_ids(this->team_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_team_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->crm_id(), output);
  }

  // optional string account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account_id(), output);
  }

  // optional string idb_key = 3;
  if (has_idb_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idb_key().data(), this->idb_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->idb_key(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  // optional string account_name = 5;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account_name(), output);
  }

  // optional string serial_number = 6;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->serial_number(), output);
  }

  // optional string role_code = 7;
  if (has_role_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_code().data(), this->role_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->role_code(), output);
  }

  // repeated string team_ids = 8;
  for (int i = 0; i < this->team_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->team_ids(i).data(), this->team_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->team_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crm_id(), target);
  }

  // optional string account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_id(), target);
  }

  // optional string idb_key = 3;
  if (has_idb_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idb_key().data(), this->idb_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->idb_key(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // optional string account_name = 5;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account_name(), target);
  }

  // optional string serial_number = 6;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->serial_number(), target);
  }

  // optional string role_code = 7;
  if (has_role_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_code().data(), this->role_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->role_code(), target);
  }

  // repeated string team_ids = 8;
  for (int i = 0; i < this->team_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_ids(i).data(), this->team_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->team_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string crm_id = 1;
    if (has_crm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crm_id());
    }

    // optional string account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }

    // optional string idb_key = 3;
    if (has_idb_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idb_key());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string account_name = 5;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string serial_number = 6;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string role_code = 7;
    if (has_role_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_code());
    }

  }
  // repeated string team_ids = 8;
  total_size += 1 * this->team_ids_size();
  for (int i = 0; i < this->team_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->team_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountItem::MergeFrom(const AccountItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_ids_.MergeFrom(from.team_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crm_id()) {
      set_crm_id(from.crm_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_idb_key()) {
      set_idb_key(from.idb_key());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_role_code()) {
      set_role_code(from.role_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountItem::CopyFrom(const AccountItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountItem::IsInitialized() const {

  return true;
}

void AccountItem::Swap(AccountItem* other) {
  if (other != this) {
    std::swap(crm_id_, other->crm_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(idb_key_, other->idb_key_);
    std::swap(account_, other->account_);
    std::swap(account_name_, other->account_name_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(role_code_, other->role_code_);
    team_ids_.Swap(&other->team_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountItem_descriptor_;
  metadata.reflection = AccountItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountListResponse::kCommonFieldsFieldNumber;
const int GetAccountListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetAccountListResponse::GetAccountListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountListResponse::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonResponseFields*>(&::Crm::CommonResponseFields::default_instance());
}

GetAccountListResponse::GetAccountListResponse(const GetAccountListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountListResponse::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountListResponse::~GetAccountListResponse() {
  SharedDtor();
}

void GetAccountListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetAccountListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountListResponse_descriptor_;
}

const GetAccountListResponse& GetAccountListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetAccountListResponse* GetAccountListResponse::default_instance_ = NULL;

GetAccountListResponse* GetAccountListResponse::New() const {
  return new GetAccountListResponse;
}

void GetAccountListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonResponseFields::Clear();
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonResponseFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .Crm.AccountItem result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  // repeated .Crm.AccountItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  // repeated .Crm.AccountItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonResponseFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  // repeated .Crm.AccountItem result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountListResponse::MergeFrom(const GetAccountListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonResponseFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountListResponse::CopyFrom(const GetAccountListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountListResponse::IsInitialized() const {

  return true;
}

void GetAccountListResponse::Swap(GetAccountListResponse* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountListResponse_descriptor_;
  metadata.reflection = GetAccountListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoleListRequest::kCommonFieldsFieldNumber;
#endif  // !_MSC_VER

GetRoleListRequest::GetRoleListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoleListRequest::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonRequestFields*>(&::Crm::CommonRequestFields::default_instance());
}

GetRoleListRequest::GetRoleListRequest(const GetRoleListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoleListRequest::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoleListRequest::~GetRoleListRequest() {
  SharedDtor();
}

void GetRoleListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetRoleListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoleListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoleListRequest_descriptor_;
}

const GetRoleListRequest& GetRoleListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetRoleListRequest* GetRoleListRequest::default_instance_ = NULL;

GetRoleListRequest* GetRoleListRequest::New() const {
  return new GetRoleListRequest;
}

void GetRoleListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonRequestFields::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoleListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonRequestFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoleListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoleListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoleListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonRequestFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoleListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoleListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoleListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoleListRequest::MergeFrom(const GetRoleListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonRequestFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoleListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoleListRequest::CopyFrom(const GetRoleListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoleListRequest::IsInitialized() const {

  return true;
}

void GetRoleListRequest::Swap(GetRoleListRequest* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoleListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoleListRequest_descriptor_;
  metadata.reflection = GetRoleListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleItem::kCrmIdFieldNumber;
const int RoleItem::kRoleCodeFieldNumber;
const int RoleItem::kRoleNameFieldNumber;
#endif  // !_MSC_VER

RoleItem::RoleItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleItem::InitAsDefaultInstance() {
}

RoleItem::RoleItem(const RoleItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleItem::SharedCtor() {
  _cached_size_ = 0;
  crm_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleItem::~RoleItem() {
  SharedDtor();
}

void RoleItem::SharedDtor() {
  if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
    delete crm_id_;
  }
  if (role_code_ != &::google::protobuf::internal::kEmptyString) {
    delete role_code_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void RoleItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleItem_descriptor_;
}

const RoleItem& RoleItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

RoleItem* RoleItem::default_instance_ = NULL;

RoleItem* RoleItem::New() const {
  return new RoleItem;
}

void RoleItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crm_id()) {
      if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
        crm_id_->clear();
      }
    }
    if (has_role_code()) {
      if (role_code_ != &::google::protobuf::internal::kEmptyString) {
        role_code_->clear();
      }
    }
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crm_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crm_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crm_id().data(), this->crm_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_code;
        break;
      }

      // optional string role_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_code().data(), this->role_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->crm_id(), output);
  }

  // optional string role_code = 2;
  if (has_role_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_code().data(), this->role_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_code(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crm_id(), target);
  }

  // optional string role_code = 2;
  if (has_role_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_code().data(), this->role_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_code(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string crm_id = 1;
    if (has_crm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crm_id());
    }

    // optional string role_code = 2;
    if (has_role_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_code());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleItem::MergeFrom(const RoleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crm_id()) {
      set_crm_id(from.crm_id());
    }
    if (from.has_role_code()) {
      set_role_code(from.role_code());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleItem::CopyFrom(const RoleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleItem::IsInitialized() const {

  return true;
}

void RoleItem::Swap(RoleItem* other) {
  if (other != this) {
    std::swap(crm_id_, other->crm_id_);
    std::swap(role_code_, other->role_code_);
    std::swap(role_name_, other->role_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleItem_descriptor_;
  metadata.reflection = RoleItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoleListResponse::kCommonFieldsFieldNumber;
const int GetRoleListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetRoleListResponse::GetRoleListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoleListResponse::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonResponseFields*>(&::Crm::CommonResponseFields::default_instance());
}

GetRoleListResponse::GetRoleListResponse(const GetRoleListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoleListResponse::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoleListResponse::~GetRoleListResponse() {
  SharedDtor();
}

void GetRoleListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetRoleListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoleListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoleListResponse_descriptor_;
}

const GetRoleListResponse& GetRoleListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetRoleListResponse* GetRoleListResponse::default_instance_ = NULL;

GetRoleListResponse* GetRoleListResponse::New() const {
  return new GetRoleListResponse;
}

void GetRoleListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonResponseFields::Clear();
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoleListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonResponseFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .Crm.RoleItem result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoleListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  // repeated .Crm.RoleItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoleListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  // repeated .Crm.RoleItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoleListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonResponseFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  // repeated .Crm.RoleItem result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoleListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoleListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoleListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoleListResponse::MergeFrom(const GetRoleListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonResponseFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoleListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoleListResponse::CopyFrom(const GetRoleListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoleListResponse::IsInitialized() const {

  return true;
}

void GetRoleListResponse::Swap(GetRoleListResponse* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoleListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoleListResponse_descriptor_;
  metadata.reflection = GetRoleListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTeamListRequest::kCommonFieldsFieldNumber;
#endif  // !_MSC_VER

GetTeamListRequest::GetTeamListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTeamListRequest::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonRequestFields*>(&::Crm::CommonRequestFields::default_instance());
}

GetTeamListRequest::GetTeamListRequest(const GetTeamListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTeamListRequest::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTeamListRequest::~GetTeamListRequest() {
  SharedDtor();
}

void GetTeamListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetTeamListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTeamListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTeamListRequest_descriptor_;
}

const GetTeamListRequest& GetTeamListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetTeamListRequest* GetTeamListRequest::default_instance_ = NULL;

GetTeamListRequest* GetTeamListRequest::New() const {
  return new GetTeamListRequest;
}

void GetTeamListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonRequestFields::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTeamListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonRequestFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTeamListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTeamListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonRequestFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTeamListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonRequestFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTeamListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTeamListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTeamListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTeamListRequest::MergeFrom(const GetTeamListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonRequestFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTeamListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTeamListRequest::CopyFrom(const GetTeamListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTeamListRequest::IsInitialized() const {

  return true;
}

void GetTeamListRequest::Swap(GetTeamListRequest* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTeamListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTeamListRequest_descriptor_;
  metadata.reflection = GetTeamListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamItem::kCrmIdFieldNumber;
const int TeamItem::kTeamIdFieldNumber;
const int TeamItem::kTeamNameFieldNumber;
const int TeamItem::kTeamCodeFieldNumber;
const int TeamItem::kDescFieldNumber;
#endif  // !_MSC_VER

TeamItem::TeamItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamItem::InitAsDefaultInstance() {
}

TeamItem::TeamItem(const TeamItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamItem::SharedCtor() {
  _cached_size_ = 0;
  crm_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamItem::~TeamItem() {
  SharedDtor();
}

void TeamItem::SharedDtor() {
  if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
    delete crm_id_;
  }
  if (team_id_ != &::google::protobuf::internal::kEmptyString) {
    delete team_id_;
  }
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (team_code_ != &::google::protobuf::internal::kEmptyString) {
    delete team_code_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void TeamItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamItem_descriptor_;
}

const TeamItem& TeamItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

TeamItem* TeamItem::default_instance_ = NULL;

TeamItem* TeamItem::New() const {
  return new TeamItem;
}

void TeamItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crm_id()) {
      if (crm_id_ != &::google::protobuf::internal::kEmptyString) {
        crm_id_->clear();
      }
    }
    if (has_team_id()) {
      if (team_id_ != &::google::protobuf::internal::kEmptyString) {
        team_id_->clear();
      }
    }
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    if (has_team_code()) {
      if (team_code_ != &::google::protobuf::internal::kEmptyString) {
        team_code_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crm_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crm_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crm_id().data(), this->crm_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_id;
        break;
      }

      // optional string team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_id().data(), this->team_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }

      // optional bytes team_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_team_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_team_code;
        break;
      }

      // optional bytes team_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_team_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }

      // optional bytes desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->crm_id(), output);
  }

  // optional string team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_id().data(), this->team_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->team_id(), output);
  }

  // optional bytes team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->team_name(), output);
  }

  // optional bytes team_code = 4;
  if (has_team_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->team_code(), output);
  }

  // optional bytes desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string crm_id = 1;
  if (has_crm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crm_id().data(), this->crm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crm_id(), target);
  }

  // optional string team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_id().data(), this->team_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_id(), target);
  }

  // optional bytes team_name = 3;
  if (has_team_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->team_name(), target);
  }

  // optional bytes team_code = 4;
  if (has_team_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->team_code(), target);
  }

  // optional bytes desc = 5;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string crm_id = 1;
    if (has_crm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crm_id());
    }

    // optional string team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_id());
    }

    // optional bytes team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->team_name());
    }

    // optional bytes team_code = 4;
    if (has_team_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->team_code());
    }

    // optional bytes desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamItem::MergeFrom(const TeamItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crm_id()) {
      set_crm_id(from.crm_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_code()) {
      set_team_code(from.team_code());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamItem::CopyFrom(const TeamItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamItem::IsInitialized() const {

  return true;
}

void TeamItem::Swap(TeamItem* other) {
  if (other != this) {
    std::swap(crm_id_, other->crm_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_code_, other->team_code_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamItem_descriptor_;
  metadata.reflection = TeamItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTeamListResponse::kCommonFieldsFieldNumber;
const int GetTeamListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetTeamListResponse::GetTeamListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTeamListResponse::InitAsDefaultInstance() {
  common_fields_ = const_cast< ::Crm::CommonResponseFields*>(&::Crm::CommonResponseFields::default_instance());
}

GetTeamListResponse::GetTeamListResponse(const GetTeamListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTeamListResponse::SharedCtor() {
  _cached_size_ = 0;
  common_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTeamListResponse::~GetTeamListResponse() {
  SharedDtor();
}

void GetTeamListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete common_fields_;
  }
}

void GetTeamListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTeamListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTeamListResponse_descriptor_;
}

const GetTeamListResponse& GetTeamListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

GetTeamListResponse* GetTeamListResponse::default_instance_ = NULL;

GetTeamListResponse* GetTeamListResponse::New() const {
  return new GetTeamListResponse;
}

void GetTeamListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_fields()) {
      if (common_fields_ != NULL) common_fields_->::Crm::CommonResponseFields::Clear();
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTeamListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Crm.CommonResponseFields common_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .Crm.TeamItem result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTeamListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_fields(), output);
  }

  // repeated .Crm.TeamItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTeamListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Crm.CommonResponseFields common_fields = 1;
  if (has_common_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_fields(), target);
  }

  // repeated .Crm.TeamItem result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTeamListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Crm.CommonResponseFields common_fields = 1;
    if (has_common_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_fields());
    }

  }
  // repeated .Crm.TeamItem result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTeamListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTeamListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTeamListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTeamListResponse::MergeFrom(const GetTeamListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_fields()) {
      mutable_common_fields()->::Crm::CommonResponseFields::MergeFrom(from.common_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTeamListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTeamListResponse::CopyFrom(const GetTeamListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTeamListResponse::IsInitialized() const {

  return true;
}

void GetTeamListResponse::Swap(GetTeamListResponse* other) {
  if (other != this) {
    std::swap(common_fields_, other->common_fields_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTeamListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTeamListResponse_descriptor_;
  metadata.reflection = GetTeamListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountUpdateEvent::kEventTypeFieldNumber;
const int AccountUpdateEvent::kAccountFieldNumber;
#endif  // !_MSC_VER

AccountUpdateEvent::AccountUpdateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountUpdateEvent::InitAsDefaultInstance() {
  account_ = const_cast< ::Crm::AccountItem*>(&::Crm::AccountItem::default_instance());
}

AccountUpdateEvent::AccountUpdateEvent(const AccountUpdateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountUpdateEvent::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountUpdateEvent::~AccountUpdateEvent() {
  SharedDtor();
}

void AccountUpdateEvent::SharedDtor() {
  if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
    delete eventtype_;
  }
  if (this != default_instance_) {
    delete account_;
  }
}

void AccountUpdateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountUpdateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountUpdateEvent_descriptor_;
}

const AccountUpdateEvent& AccountUpdateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

AccountUpdateEvent* AccountUpdateEvent::default_instance_ = NULL;

AccountUpdateEvent* AccountUpdateEvent::New() const {
  return new AccountUpdateEvent;
}

void AccountUpdateEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventtype()) {
      if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
        eventtype_->clear();
      }
    }
    if (has_account()) {
      if (account_ != NULL) account_->::Crm::AccountItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountUpdateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventtype().data(), this->eventtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional .Crm.AccountItem account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountUpdateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eventtype(), output);
  }

  // optional .Crm.AccountItem account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountUpdateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventtype(), target);
  }

  // optional .Crm.AccountItem account = 2;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountUpdateEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventtype());
    }

    // optional .Crm.AccountItem account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountUpdateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountUpdateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountUpdateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountUpdateEvent::MergeFrom(const AccountUpdateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_account()) {
      mutable_account()->::Crm::AccountItem::MergeFrom(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountUpdateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountUpdateEvent::CopyFrom(const AccountUpdateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountUpdateEvent::IsInitialized() const {

  return true;
}

void AccountUpdateEvent::Swap(AccountUpdateEvent* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountUpdateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountUpdateEvent_descriptor_;
  metadata.reflection = AccountUpdateEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamUpdateEvent::kEventTypeFieldNumber;
const int TeamUpdateEvent::kTeamFieldNumber;
#endif  // !_MSC_VER

TeamUpdateEvent::TeamUpdateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamUpdateEvent::InitAsDefaultInstance() {
  team_ = const_cast< ::Crm::TeamItem*>(&::Crm::TeamItem::default_instance());
}

TeamUpdateEvent::TeamUpdateEvent(const TeamUpdateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamUpdateEvent::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamUpdateEvent::~TeamUpdateEvent() {
  SharedDtor();
}

void TeamUpdateEvent::SharedDtor() {
  if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
    delete eventtype_;
  }
  if (this != default_instance_) {
    delete team_;
  }
}

void TeamUpdateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamUpdateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamUpdateEvent_descriptor_;
}

const TeamUpdateEvent& TeamUpdateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

TeamUpdateEvent* TeamUpdateEvent::default_instance_ = NULL;

TeamUpdateEvent* TeamUpdateEvent::New() const {
  return new TeamUpdateEvent;
}

void TeamUpdateEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventtype()) {
      if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
        eventtype_->clear();
      }
    }
    if (has_team()) {
      if (team_ != NULL) team_->::Crm::TeamItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamUpdateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventtype().data(), this->eventtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional .Crm.TeamItem team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamUpdateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eventtype(), output);
  }

  // optional .Crm.TeamItem team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamUpdateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventtype(), target);
  }

  // optional .Crm.TeamItem team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamUpdateEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventtype());
    }

    // optional .Crm.TeamItem team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamUpdateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamUpdateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamUpdateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamUpdateEvent::MergeFrom(const TeamUpdateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_team()) {
      mutable_team()->::Crm::TeamItem::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamUpdateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamUpdateEvent::CopyFrom(const TeamUpdateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamUpdateEvent::IsInitialized() const {

  return true;
}

void TeamUpdateEvent::Swap(TeamUpdateEvent* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamUpdateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamUpdateEvent_descriptor_;
  metadata.reflection = TeamUpdateEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstitutionUpdateEvent::kEventTypeFieldNumber;
const int InstitutionUpdateEvent::kInstitutionFieldNumber;
#endif  // !_MSC_VER

InstitutionUpdateEvent::InstitutionUpdateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstitutionUpdateEvent::InitAsDefaultInstance() {
  institution_ = const_cast< ::Crm::InstitutionItem*>(&::Crm::InstitutionItem::default_instance());
}

InstitutionUpdateEvent::InstitutionUpdateEvent(const InstitutionUpdateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstitutionUpdateEvent::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  institution_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstitutionUpdateEvent::~InstitutionUpdateEvent() {
  SharedDtor();
}

void InstitutionUpdateEvent::SharedDtor() {
  if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
    delete eventtype_;
  }
  if (this != default_instance_) {
    delete institution_;
  }
}

void InstitutionUpdateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstitutionUpdateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstitutionUpdateEvent_descriptor_;
}

const InstitutionUpdateEvent& InstitutionUpdateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

InstitutionUpdateEvent* InstitutionUpdateEvent::default_instance_ = NULL;

InstitutionUpdateEvent* InstitutionUpdateEvent::New() const {
  return new InstitutionUpdateEvent;
}

void InstitutionUpdateEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventtype()) {
      if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
        eventtype_->clear();
      }
    }
    if (has_institution()) {
      if (institution_ != NULL) institution_->::Crm::InstitutionItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstitutionUpdateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventtype().data(), this->eventtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_institution;
        break;
      }

      // optional .Crm.InstitutionItem institution = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_institution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_institution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstitutionUpdateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eventtype(), output);
  }

  // optional .Crm.InstitutionItem institution = 2;
  if (has_institution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->institution(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstitutionUpdateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventtype(), target);
  }

  // optional .Crm.InstitutionItem institution = 2;
  if (has_institution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->institution(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstitutionUpdateEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventtype());
    }

    // optional .Crm.InstitutionItem institution = 2;
    if (has_institution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->institution());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstitutionUpdateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstitutionUpdateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstitutionUpdateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstitutionUpdateEvent::MergeFrom(const InstitutionUpdateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_institution()) {
      mutable_institution()->::Crm::InstitutionItem::MergeFrom(from.institution());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstitutionUpdateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstitutionUpdateEvent::CopyFrom(const InstitutionUpdateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstitutionUpdateEvent::IsInitialized() const {

  return true;
}

void InstitutionUpdateEvent::Swap(InstitutionUpdateEvent* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    std::swap(institution_, other->institution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstitutionUpdateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstitutionUpdateEvent_descriptor_;
  metadata.reflection = InstitutionUpdateEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactUpdateEvent::kEventTypeFieldNumber;
const int ContactUpdateEvent::kContactFieldNumber;
#endif  // !_MSC_VER

ContactUpdateEvent::ContactUpdateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactUpdateEvent::InitAsDefaultInstance() {
  contact_ = const_cast< ::Crm::ContactItem*>(&::Crm::ContactItem::default_instance());
}

ContactUpdateEvent::ContactUpdateEvent(const ContactUpdateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactUpdateEvent::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contact_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactUpdateEvent::~ContactUpdateEvent() {
  SharedDtor();
}

void ContactUpdateEvent::SharedDtor() {
  if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
    delete eventtype_;
  }
  if (this != default_instance_) {
    delete contact_;
  }
}

void ContactUpdateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactUpdateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactUpdateEvent_descriptor_;
}

const ContactUpdateEvent& ContactUpdateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

ContactUpdateEvent* ContactUpdateEvent::default_instance_ = NULL;

ContactUpdateEvent* ContactUpdateEvent::New() const {
  return new ContactUpdateEvent;
}

void ContactUpdateEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventtype()) {
      if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
        eventtype_->clear();
      }
    }
    if (has_contact()) {
      if (contact_ != NULL) contact_->::Crm::ContactItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactUpdateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventtype().data(), this->eventtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contact;
        break;
      }

      // optional .Crm.ContactItem contact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactUpdateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eventtype(), output);
  }

  // optional .Crm.ContactItem contact = 2;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactUpdateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventtype(), target);
  }

  // optional .Crm.ContactItem contact = 2;
  if (has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactUpdateEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventtype());
    }

    // optional .Crm.ContactItem contact = 2;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contact());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactUpdateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactUpdateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactUpdateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactUpdateEvent::MergeFrom(const ContactUpdateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_contact()) {
      mutable_contact()->::Crm::ContactItem::MergeFrom(from.contact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactUpdateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactUpdateEvent::CopyFrom(const ContactUpdateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactUpdateEvent::IsInitialized() const {

  return true;
}

void ContactUpdateEvent::Swap(ContactUpdateEvent* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    std::swap(contact_, other->contact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactUpdateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactUpdateEvent_descriptor_;
  metadata.reflection = ContactUpdateEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManagerUpdateEvent::kEventTypeFieldNumber;
const int ManagerUpdateEvent::kMappingsFieldNumber;
#endif  // !_MSC_VER

ManagerUpdateEvent::ManagerUpdateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManagerUpdateEvent::InitAsDefaultInstance() {
}

ManagerUpdateEvent::ManagerUpdateEvent(const ManagerUpdateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManagerUpdateEvent::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManagerUpdateEvent::~ManagerUpdateEvent() {
  SharedDtor();
}

void ManagerUpdateEvent::SharedDtor() {
  if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
    delete eventtype_;
  }
  if (this != default_instance_) {
  }
}

void ManagerUpdateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagerUpdateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManagerUpdateEvent_descriptor_;
}

const ManagerUpdateEvent& ManagerUpdateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrmProto_2eproto();
  return *default_instance_;
}

ManagerUpdateEvent* ManagerUpdateEvent::default_instance_ = NULL;

ManagerUpdateEvent* ManagerUpdateEvent::New() const {
  return new ManagerUpdateEvent;
}

void ManagerUpdateEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventtype()) {
      if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
        eventtype_->clear();
      }
    }
  }
  mappings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManagerUpdateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventtype().data(), this->eventtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mappings;
        break;
      }

      // repeated .Crm.AccountMappingItem mappings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mappings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mappings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mappings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManagerUpdateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eventtype(), output);
  }

  // repeated .Crm.AccountMappingItem mappings = 2;
  for (int i = 0; i < this->mappings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mappings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManagerUpdateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventtype(), target);
  }

  // repeated .Crm.AccountMappingItem mappings = 2;
  for (int i = 0; i < this->mappings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mappings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManagerUpdateEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventtype());
    }

  }
  // repeated .Crm.AccountMappingItem mappings = 2;
  total_size += 1 * this->mappings_size();
  for (int i = 0; i < this->mappings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mappings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagerUpdateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManagerUpdateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManagerUpdateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManagerUpdateEvent::MergeFrom(const ManagerUpdateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mappings_.MergeFrom(from.mappings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManagerUpdateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerUpdateEvent::CopyFrom(const ManagerUpdateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerUpdateEvent::IsInitialized() const {

  return true;
}

void ManagerUpdateEvent::Swap(ManagerUpdateEvent* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    mappings_.Swap(&other->mappings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManagerUpdateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManagerUpdateEvent_descriptor_;
  metadata.reflection = ManagerUpdateEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Crm

// @@protoc_insertion_point(global_scope)
